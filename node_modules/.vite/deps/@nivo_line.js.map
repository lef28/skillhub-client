{
  "version": 3,
  "sources": ["../../lodash/noop.js", "../../lodash/_createSet.js", "../../lodash/_baseUniq.js", "../../lodash/uniq.js", "../../lodash/_baseIsMatch.js", "../../lodash/_isStrictComparable.js", "../../lodash/_getMatchData.js", "../../lodash/_matchesStrictComparable.js", "../../lodash/_baseMatches.js", "../../lodash/_baseMatchesProperty.js", "../../lodash/_baseProperty.js", "../../lodash/_basePropertyDeep.js", "../../lodash/property.js", "../../lodash/_baseIteratee.js", "../../lodash/uniqBy.js", "../../lodash/_baseForOwn.js", "../../lodash/_createBaseEach.js", "../../lodash/_baseEach.js", "../../lodash/_baseMap.js", "../../lodash/_baseSortBy.js", "../../lodash/_compareAscending.js", "../../lodash/_compareMultiple.js", "../../lodash/_baseOrderBy.js", "../../lodash/sortBy.js", "../../lodash/_baseIsDate.js", "../../lodash/isDate.js", "../../@nivo/scales/src/timeHelpers.ts", "../../@nivo/scales/src/linearScale.ts", "../../@nivo/scales/src/pointScale.ts", "../../@nivo/scales/src/bandScale.ts", "../../@nivo/scales/src/timeScale.ts", "../../@nivo/scales/src/logScale.ts", "../../@nivo/scales/src/symlogScale.ts", "../../@nivo/scales/src/compute.ts", "../../@nivo/scales/src/ticks.ts", "../../@nivo/axes/src/compute.ts", "../../@nivo/axes/src/components/AxisTick.tsx", "../../@nivo/axes/src/components/Axis.tsx", "../../@nivo/axes/src/props.ts", "../../@nivo/axes/src/components/Axes.tsx", "../../@nivo/axes/src/components/GridLine.tsx", "../../@nivo/axes/src/components/GridLines.tsx", "../../@nivo/axes/src/components/Grid.tsx", "../../@nivo/axes/src/canvas.ts", "../../delaunator/index.js", "../../d3-delaunay/src/path.js", "../../d3-delaunay/src/polygon.js", "../../d3-delaunay/src/voronoi.js", "../../d3-delaunay/src/delaunay.js", "../../@nivo/voronoi/src/props.ts", "../../@nivo/voronoi/src/computeMesh.ts", "../../@nivo/voronoi/src/hooks.ts", "../../@nivo/voronoi/src/Voronoi.tsx", "../../@nivo/voronoi/src/ResponsiveVoronoi.tsx", "../../@nivo/voronoi/src/Mesh.tsx", "../../@nivo/voronoi/src/meshCanvas.ts", "../../@nivo/line/src/PointTooltip.js", "../../@nivo/line/src/SliceTooltip.js", "../../@nivo/line/src/props.js", "../../@nivo/line/src/hooks.js", "../../@nivo/line/src/Areas.js", "../../@nivo/line/src/LinesItem.js", "../../@nivo/line/src/Lines.js", "../../@nivo/line/src/SlicesItem.js", "../../@nivo/line/src/Slices.js", "../../@nivo/line/src/Points.js", "../../@nivo/line/src/Mesh.js", "../../@nivo/line/src/Line.js", "../../@nivo/line/src/ResponsiveLine.js", "../../@nivo/line/src/LineCanvas.js", "../../@nivo/line/src/ResponsiveLineCanvas.js"],
  "sourcesContent": ["/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\nfunction noop() {\n  // No operation performed.\n}\n\nmodule.exports = noop;\n", "var Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;\n", "var SetCache = require('./_SetCache'),\n    arrayIncludes = require('./_arrayIncludes'),\n    arrayIncludesWith = require('./_arrayIncludesWith'),\n    cacheHas = require('./_cacheHas'),\n    createSet = require('./_createSet'),\n    setToArray = require('./_setToArray');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\nfunction baseUniq(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  }\n  else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n    if (set) {\n      return setToArray(set);\n    }\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache;\n  }\n  else {\n    seen = iteratee ? [] : result;\n  }\n  outer:\n  while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n\n    value = (comparator || value !== 0) ? value : 0;\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n      if (iteratee) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n    else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n      result.push(value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseUniq;\n", "var baseUniq = require('./_baseUniq');\n\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\nfunction uniq(array) {\n  return (array && array.length) ? baseUniq(array) : [];\n}\n\nmodule.exports = uniq;\n", "var Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n", "var isObject = require('./isObject');\n\n/**\n * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` if suitable for strict\n *  equality comparisons, else `false`.\n */\nfunction isStrictComparable(value) {\n  return value === value && !isObject(value);\n}\n\nmodule.exports = isStrictComparable;\n", "var isStrictComparable = require('./_isStrictComparable'),\n    keys = require('./keys');\n\n/**\n * Gets the property names, values, and compare flags of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the match data of `object`.\n */\nfunction getMatchData(object) {\n  var result = keys(object),\n      length = result.length;\n\n  while (length--) {\n    var key = result[length],\n        value = object[key];\n\n    result[length] = [key, value, isStrictComparable(value)];\n  }\n  return result;\n}\n\nmodule.exports = getMatchData;\n", "/**\n * A specialized version of `matchesProperty` for source values suitable\n * for strict equality comparisons, i.e. `===`.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction matchesStrictComparable(key, srcValue) {\n  return function(object) {\n    if (object == null) {\n      return false;\n    }\n    return object[key] === srcValue &&\n      (srcValue !== undefined || (key in Object(object)));\n  };\n}\n\nmodule.exports = matchesStrictComparable;\n", "var baseIsMatch = require('./_baseIsMatch'),\n    getMatchData = require('./_getMatchData'),\n    matchesStrictComparable = require('./_matchesStrictComparable');\n\n/**\n * The base implementation of `_.matches` which doesn't clone `source`.\n *\n * @private\n * @param {Object} source The object of property values to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatches(source) {\n  var matchData = getMatchData(source);\n  if (matchData.length == 1 && matchData[0][2]) {\n    return matchesStrictComparable(matchData[0][0], matchData[0][1]);\n  }\n  return function(object) {\n    return object === source || baseIsMatch(object, source, matchData);\n  };\n}\n\nmodule.exports = baseMatches;\n", "var baseIsEqual = require('./_baseIsEqual'),\n    get = require('./get'),\n    hasIn = require('./hasIn'),\n    isKey = require('./_isKey'),\n    isStrictComparable = require('./_isStrictComparable'),\n    matchesStrictComparable = require('./_matchesStrictComparable'),\n    toKey = require('./_toKey');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.\n *\n * @private\n * @param {string} path The path of the property to get.\n * @param {*} srcValue The value to match.\n * @returns {Function} Returns the new spec function.\n */\nfunction baseMatchesProperty(path, srcValue) {\n  if (isKey(path) && isStrictComparable(srcValue)) {\n    return matchesStrictComparable(toKey(path), srcValue);\n  }\n  return function(object) {\n    var objValue = get(object, path);\n    return (objValue === undefined && objValue === srcValue)\n      ? hasIn(object, path)\n      : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);\n  };\n}\n\nmodule.exports = baseMatchesProperty;\n", "/**\n * The base implementation of `_.property` without support for deep paths.\n *\n * @private\n * @param {string} key The key of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction baseProperty(key) {\n  return function(object) {\n    return object == null ? undefined : object[key];\n  };\n}\n\nmodule.exports = baseProperty;\n", "var baseGet = require('./_baseGet');\n\n/**\n * A specialized version of `baseProperty` which supports deep paths.\n *\n * @private\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n */\nfunction basePropertyDeep(path) {\n  return function(object) {\n    return baseGet(object, path);\n  };\n}\n\nmodule.exports = basePropertyDeep;\n", "var baseProperty = require('./_baseProperty'),\n    basePropertyDeep = require('./_basePropertyDeep'),\n    isKey = require('./_isKey'),\n    toKey = require('./_toKey');\n\n/**\n * Creates a function that returns the value at `path` of a given object.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {Array|string} path The path of the property to get.\n * @returns {Function} Returns the new accessor function.\n * @example\n *\n * var objects = [\n *   { 'a': { 'b': 2 } },\n *   { 'a': { 'b': 1 } }\n * ];\n *\n * _.map(objects, _.property('a.b'));\n * // => [2, 1]\n *\n * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');\n * // => [1, 2]\n */\nfunction property(path) {\n  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\n}\n\nmodule.exports = property;\n", "var baseMatches = require('./_baseMatches'),\n    baseMatchesProperty = require('./_baseMatchesProperty'),\n    identity = require('./identity'),\n    isArray = require('./isArray'),\n    property = require('./property');\n\n/**\n * The base implementation of `_.iteratee`.\n *\n * @private\n * @param {*} [value=_.identity] The value to convert to an iteratee.\n * @returns {Function} Returns the iteratee.\n */\nfunction baseIteratee(value) {\n  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.\n  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.\n  if (typeof value == 'function') {\n    return value;\n  }\n  if (value == null) {\n    return identity;\n  }\n  if (typeof value == 'object') {\n    return isArray(value)\n      ? baseMatchesProperty(value[0], value[1])\n      : baseMatches(value);\n  }\n  return property(value);\n}\n\nmodule.exports = baseIteratee;\n", "var baseIteratee = require('./_baseIteratee'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * This method is like `_.uniq` except that it accepts `iteratee` which is\n * invoked for each element in `array` to generate the criterion by which\n * uniqueness is computed. The order of result values is determined by the\n * order they occur in the array. The iteratee is invoked with one argument:\n * (value).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniqBy([2.1, 1.2, 2.3], Math.floor);\n * // => [2.1, 1.2]\n *\n * // The `_.property` iteratee shorthand.\n * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');\n * // => [{ 'x': 1 }, { 'x': 2 }]\n */\nfunction uniqBy(array, iteratee) {\n  return (array && array.length) ? baseUniq(array, baseIteratee(iteratee, 2)) : [];\n}\n\nmodule.exports = uniqBy;\n", "var baseFor = require('./_baseFor'),\n    keys = require('./keys');\n\n/**\n * The base implementation of `_.forOwn` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Object} Returns `object`.\n */\nfunction baseForOwn(object, iteratee) {\n  return object && baseFor(object, iteratee, keys);\n}\n\nmodule.exports = baseForOwn;\n", "var isArrayLike = require('./isArrayLike');\n\n/**\n * Creates a `baseEach` or `baseEachRight` function.\n *\n * @private\n * @param {Function} eachFunc The function to iterate over a collection.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseEach(eachFunc, fromRight) {\n  return function(collection, iteratee) {\n    if (collection == null) {\n      return collection;\n    }\n    if (!isArrayLike(collection)) {\n      return eachFunc(collection, iteratee);\n    }\n    var length = collection.length,\n        index = fromRight ? length : -1,\n        iterable = Object(collection);\n\n    while ((fromRight ? index-- : ++index < length)) {\n      if (iteratee(iterable[index], index, iterable) === false) {\n        break;\n      }\n    }\n    return collection;\n  };\n}\n\nmodule.exports = createBaseEach;\n", "var baseForOwn = require('./_baseForOwn'),\n    createBaseEach = require('./_createBaseEach');\n\n/**\n * The base implementation of `_.forEach` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array|Object} Returns `collection`.\n */\nvar baseEach = createBaseEach(baseForOwn);\n\nmodule.exports = baseEach;\n", "var baseEach = require('./_baseEach'),\n    isArrayLike = require('./isArrayLike');\n\n/**\n * The base implementation of `_.map` without support for iteratee shorthands.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction baseMap(collection, iteratee) {\n  var index = -1,\n      result = isArrayLike(collection) ? Array(collection.length) : [];\n\n  baseEach(collection, function(value, key, collection) {\n    result[++index] = iteratee(value, key, collection);\n  });\n  return result;\n}\n\nmodule.exports = baseMap;\n", "/**\n * The base implementation of `_.sortBy` which uses `comparer` to define the\n * sort order of `array` and replaces criteria objects with their corresponding\n * values.\n *\n * @private\n * @param {Array} array The array to sort.\n * @param {Function} comparer The function to define sort order.\n * @returns {Array} Returns `array`.\n */\nfunction baseSortBy(array, comparer) {\n  var length = array.length;\n\n  array.sort(comparer);\n  while (length--) {\n    array[length] = array[length].value;\n  }\n  return array;\n}\n\nmodule.exports = baseSortBy;\n", "var isSymbol = require('./isSymbol');\n\n/**\n * Compares values to sort them in ascending order.\n *\n * @private\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {number} Returns the sort order indicator for `value`.\n */\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined,\n        valIsNull = value === null,\n        valIsReflexive = value === value,\n        valIsSymbol = isSymbol(value);\n\n    var othIsDefined = other !== undefined,\n        othIsNull = other === null,\n        othIsReflexive = other === other,\n        othIsSymbol = isSymbol(other);\n\n    if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||\n        (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||\n        (valIsNull && othIsDefined && othIsReflexive) ||\n        (!valIsDefined && othIsReflexive) ||\n        !valIsReflexive) {\n      return 1;\n    }\n    if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||\n        (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||\n        (othIsNull && valIsDefined && valIsReflexive) ||\n        (!othIsDefined && valIsReflexive) ||\n        !othIsReflexive) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\nmodule.exports = compareAscending;\n", "var compareAscending = require('./_compareAscending');\n\n/**\n * Used by `_.orderBy` to compare multiple properties of a value to another\n * and stable sort them.\n *\n * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\n * specify an order of \"desc\" for descending or \"asc\" for ascending sort order\n * of corresponding values.\n *\n * @private\n * @param {Object} object The object to compare.\n * @param {Object} other The other object to compare.\n * @param {boolean[]|string[]} orders The order to sort by for each property.\n * @returns {number} Returns the sort order indicator for `object`.\n */\nfunction compareMultiple(object, other, orders) {\n  var index = -1,\n      objCriteria = object.criteria,\n      othCriteria = other.criteria,\n      length = objCriteria.length,\n      ordersLength = orders.length;\n\n  while (++index < length) {\n    var result = compareAscending(objCriteria[index], othCriteria[index]);\n    if (result) {\n      if (index >= ordersLength) {\n        return result;\n      }\n      var order = orders[index];\n      return result * (order == 'desc' ? -1 : 1);\n    }\n  }\n  // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications\n  // that causes it, under certain circumstances, to provide the same value for\n  // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\n  // for more details.\n  //\n  // This also ensures a stable sort in V8 and other engines.\n  // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n  return object.index - other.index;\n}\n\nmodule.exports = compareMultiple;\n", "var arrayMap = require('./_arrayMap'),\n    baseGet = require('./_baseGet'),\n    baseIteratee = require('./_baseIteratee'),\n    baseMap = require('./_baseMap'),\n    baseSortBy = require('./_baseSortBy'),\n    baseUnary = require('./_baseUnary'),\n    compareMultiple = require('./_compareMultiple'),\n    identity = require('./identity'),\n    isArray = require('./isArray');\n\n/**\n * The base implementation of `_.orderBy` without param guards.\n *\n * @private\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\n * @param {string[]} orders The sort orders of `iteratees`.\n * @returns {Array} Returns the new sorted array.\n */\nfunction baseOrderBy(collection, iteratees, orders) {\n  if (iteratees.length) {\n    iteratees = arrayMap(iteratees, function(iteratee) {\n      if (isArray(iteratee)) {\n        return function(value) {\n          return baseGet(value, iteratee.length === 1 ? iteratee[0] : iteratee);\n        }\n      }\n      return iteratee;\n    });\n  } else {\n    iteratees = [identity];\n  }\n\n  var index = -1;\n  iteratees = arrayMap(iteratees, baseUnary(baseIteratee));\n\n  var result = baseMap(collection, function(value, key, collection) {\n    var criteria = arrayMap(iteratees, function(iteratee) {\n      return iteratee(value);\n    });\n    return { 'criteria': criteria, 'index': ++index, 'value': value };\n  });\n\n  return baseSortBy(result, function(object, other) {\n    return compareMultiple(object, other, orders);\n  });\n}\n\nmodule.exports = baseOrderBy;\n", "var baseFlatten = require('./_baseFlatten'),\n    baseOrderBy = require('./_baseOrderBy'),\n    baseRest = require('./_baseRest'),\n    isIterateeCall = require('./_isIterateeCall');\n\n/**\n * Creates an array of elements, sorted in ascending order by the results of\n * running each element in a collection thru each iteratee. This method\n * performs a stable sort, that is, it preserves the original sort order of\n * equal elements. The iteratees are invoked with one argument: (value).\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {...(Function|Function[])} [iteratees=[_.identity]]\n *  The iteratees to sort by.\n * @returns {Array} Returns the new sorted array.\n * @example\n *\n * var users = [\n *   { 'user': 'fred',   'age': 48 },\n *   { 'user': 'barney', 'age': 36 },\n *   { 'user': 'fred',   'age': 30 },\n *   { 'user': 'barney', 'age': 34 }\n * ];\n *\n * _.sortBy(users, [function(o) { return o.user; }]);\n * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 30]]\n *\n * _.sortBy(users, ['user', 'age']);\n * // => objects for [['barney', 34], ['barney', 36], ['fred', 30], ['fred', 48]]\n */\nvar sortBy = baseRest(function(collection, iteratees) {\n  if (collection == null) {\n    return [];\n  }\n  var length = iteratees.length;\n  if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {\n    iteratees = [];\n  } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {\n    iteratees = [iteratees[0]];\n  }\n  return baseOrderBy(collection, baseFlatten(iteratees, 1), []);\n});\n\nmodule.exports = sortBy;\n", "var baseGetTag = require('./_baseGetTag'),\n    isObjectLike = require('./isObjectLike');\n\n/** `Object#toString` result references. */\nvar dateTag = '[object Date]';\n\n/**\n * The base implementation of `_.isDate` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n */\nfunction baseIsDate(value) {\n  return isObjectLike(value) && baseGetTag(value) == dateTag;\n}\n\nmodule.exports = baseIsDate;\n", "var baseIsDate = require('./_baseIsDate'),\n    baseUnary = require('./_baseUnary'),\n    nodeUtil = require('./_nodeUtil');\n\n/* Node.js helper references. */\nvar nodeIsDate = nodeUtil && nodeUtil.isDate;\n\n/**\n * Checks if `value` is classified as a `Date` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a date object, else `false`.\n * @example\n *\n * _.isDate(new Date);\n * // => true\n *\n * _.isDate('Mon April 23 2012');\n * // => false\n */\nvar isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;\n\nmodule.exports = isDate;\n", "import { timeParse, utcParse } from 'd3-time-format'\n\nexport const timePrecisions = [\n    'millisecond',\n    'second',\n    'minute',\n    'hour',\n    'day',\n    'month',\n    'year',\n] as const\n\nexport type TIME_PRECISION = typeof timePrecisions[number]\n\nexport const precisionCutOffs: ((date: Date) => void)[] = [\n    date => date.setMilliseconds(0),\n    date => date.setSeconds(0),\n    date => date.setMinutes(0),\n    date => date.setHours(0),\n    date => date.setDate(1),\n    date => date.setMonth(0),\n]\n\nexport const precisionCutOffsByType: Record<TIME_PRECISION, ((date: Date) => void)[]> = {\n    millisecond: [],\n    second: precisionCutOffs.slice(0, 1),\n    minute: precisionCutOffs.slice(0, 2),\n    hour: precisionCutOffs.slice(0, 3),\n    day: precisionCutOffs.slice(0, 4),\n    month: precisionCutOffs.slice(0, 5),\n    year: precisionCutOffs.slice(0, 6),\n}\n\nexport const createPrecisionMethod = (precision: TIME_PRECISION) => (date: Date) => {\n    precisionCutOffsByType[precision].forEach(cutOff => {\n        cutOff(date)\n    })\n\n    return date\n}\n\nexport const createDateNormalizer = ({\n    format = 'native',\n    precision = 'millisecond',\n    useUTC = true,\n}: {\n    format?: 'native' | string\n    precision?: TIME_PRECISION\n    useUTC?: boolean\n}) => {\n    const precisionFn = createPrecisionMethod(precision)\n\n    return (value: Date | string | undefined) => {\n        if (value === undefined) {\n            return value\n        }\n\n        if (format === 'native' || value instanceof Date) {\n            return precisionFn(value as Date)\n        }\n\n        const parseTime = useUTC ? utcParse(format) : timeParse(format)\n        return precisionFn(parseTime(value as string) as Date)\n    }\n}\n", "import { NumberValue, scaleLinear, ScaleLinear as D3ScaleLinear } from 'd3-scale'\nimport { ScaleLinearSpec, ScaleLinear, ComputedSerieAxis, ScaleAxis } from './types'\n\nexport const createLinearScale = <Output extends NumberValue>(\n    {\n        min = 0,\n        max = 'auto',\n        stacked = false,\n        reverse = false,\n        clamp = false,\n        nice = false,\n    }: ScaleLinearSpec,\n    data: ComputedSerieAxis<Output>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: NumberValue\n    if (min === 'auto') {\n        minValue = stacked === true ? data.minStacked ?? 0 : data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: NumberValue\n    if (max === 'auto') {\n        maxValue = stacked === true ? data.maxStacked ?? 0 : data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLinear<number, Output>()\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .domain(reverse ? [maxValue, minValue] : [minValue, maxValue])\n        .clamp(clamp)\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'number') scale.nice(nice)\n\n    return castLinearScale<number, Output>(scale, stacked)\n}\n\nexport const castLinearScale = <Range, Output>(\n    scale: D3ScaleLinear<Range, Output>,\n    stacked = false\n) => {\n    const typedScale = scale as unknown as ScaleLinear<number>\n    typedScale.type = 'linear'\n    typedScale.stacked = stacked\n\n    return typedScale\n}\n", "import { scalePoint, ScalePoint as D3ScalePoint } from 'd3-scale'\nimport { ComputedSerieAxis, ScalePoint, ScalePointSpec, StringValue } from './types'\n\nexport const createPointScale = <Input extends StringValue>(\n    _spec: ScalePointSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number\n) => {\n    const scale = scalePoint<Input>().range([0, size]).domain(data.all)\n\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n\nexport const castPointScale = <Input extends StringValue>(scale: D3ScalePoint<Input>) => {\n    const typedScale = scale as ScalePoint<Input>\n    typedScale.type = 'point'\n\n    return typedScale\n}\n", "import { scaleBand, ScaleBand as D3ScaleBand } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleBand, ScaleBandSpec, StringValue, ScaleAxis } from './types'\n\nexport const createBandScale = <Input extends StringValue>(\n    { round = true }: ScaleBandSpec,\n    data: ComputedSerieAxis<Input>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const scale = scaleBand<Input>()\n        .range(axis === 'x' ? [0, size] : [size, 0])\n        .domain(data.all)\n        .round(round)\n\n    return castBandScale<Input>(scale)\n}\n\nexport const castBandScale = <Input>(scale: D3ScaleBand<Input>) => {\n    const typedScale = scale as ScaleBand<Input>\n    typedScale.type = 'band'\n\n    return typedScale\n}\n", "import { NumberValue, scaleTime, scaleUtc } from 'd3-scale'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ComputedSerieAxis, ScaleTime, ScaleTimeSpec } from './types'\n\nexport const createTimeScale = <Input extends Date | NumberValue>(\n    {\n        format = 'native',\n        precision = 'millisecond',\n        min = 'auto',\n        max = 'auto',\n        useUTC = true,\n        nice = false,\n    }: ScaleTimeSpec,\n    data: ComputedSerieAxis<string | Date>,\n    size: number\n) => {\n    const normalize = createDateNormalizer({ format, precision, useUTC })\n\n    let minValue: Date | undefined\n    if (min === 'auto') {\n        minValue = normalize(data.min)\n    } else if (format !== 'native') {\n        minValue = normalize(min)\n    } else {\n        minValue = min as Date\n    }\n\n    let maxValue: Date | undefined\n    if (max === 'auto') {\n        maxValue = normalize(data.max)\n    } else if (format !== 'native') {\n        maxValue = normalize(max)\n    } else {\n        maxValue = max as Date\n    }\n\n    const scale = useUTC ? scaleUtc() : scaleTime()\n\n    scale.range([0, size])\n\n    if (minValue && maxValue) scale.domain([minValue, maxValue])\n\n    if (nice === true) scale.nice()\n    else if (typeof nice === 'object' || typeof nice === 'number') scale.nice(nice)\n\n    const typedScale = scale as unknown as ScaleTime<Input>\n\n    typedScale.type = 'time'\n    typedScale.useUTC = useUTC\n\n    return typedScale\n}\n", "import { scaleLog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleLog, ScaleLogSpec } from './types'\n\nexport const createLogScale = (\n    { base = 10, min = 'auto', max = 'auto' }: ScaleLogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    const hasZero = data.all.some(v => v === 0)\n    if (hasZero) {\n        throw new Error(`a log scale domain must not include or cross zero`)\n    }\n\n    let sign: number\n    let hasMixedSign = false\n    data.all\n        .filter(v => v != null)\n        .forEach(v => {\n            if (hasMixedSign) return\n            if (sign === undefined) {\n                sign = Math.sign(v)\n            } else if (Math.sign(v) !== sign) {\n                hasMixedSign = true\n            }\n        })\n\n    if (hasMixedSign) {\n        throw new Error(`a log scale domain must be strictly-positive or strictly-negative`)\n    }\n\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleLog<number, number>()\n        .domain([minValue, maxValue])\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .base(base)\n        .nice()\n\n    const typedScale = scale as ScaleLog\n    typedScale.type = 'log'\n\n    return typedScale\n}\n", "import { scaleSymlog } from 'd3-scale'\nimport { ComputedSerieAxis, ScaleAxis, ScaleSymlog, ScaleSymlogSpec } from './types'\n\nexport const createSymlogScale = (\n    { constant = 1, min = 'auto', max = 'auto', reverse = false }: ScaleSymlogSpec,\n    data: ComputedSerieAxis<number>,\n    size: number,\n    axis: ScaleAxis\n) => {\n    let minValue: number\n    if (min === 'auto') {\n        minValue = data.min\n    } else {\n        minValue = min\n    }\n\n    let maxValue: number\n    if (max === 'auto') {\n        maxValue = data.max\n    } else {\n        maxValue = max\n    }\n\n    const scale = scaleSymlog<number, number>()\n        .constant(constant)\n        .rangeRound(axis === 'x' ? [0, size] : [size, 0])\n        .nice()\n\n    if (reverse === true) scale.domain([maxValue, minValue])\n    else scale.domain([minValue, maxValue])\n\n    const typedScale = scale as ScaleSymlog\n    typedScale.type = 'symlog'\n\n    return typedScale\n}\n", "import uniq from 'lodash/uniq'\nimport uniqBy from 'lodash/uniqBy'\nimport sortBy from 'lodash/sortBy'\nimport last from 'lodash/last'\nimport isDate from 'lodash/isDate'\nimport { createDateNormalizer } from './timeHelpers'\nimport { ScaleAxis, ScaleSpec, ScaleValue, SerieAxis, ComputedSerieAxis } from './types'\nimport { createLinearScale } from './linearScale'\nimport { createPointScale } from './pointScale'\nimport { createBandScale } from './bandScale'\nimport { createTimeScale } from './timeScale'\nimport { createLogScale } from './logScale'\nimport { createSymlogScale } from './symlogScale'\n\ntype XY = ReturnType<typeof generateSeriesXY>\n\ntype StackedXY = {\n    [K in keyof XY]: XY[K] & {\n        maxStacked: number\n        minStacked: number\n    }\n}\n\ninterface SerieDatum {\n    x: number | string | Date\n    // only numbers can be stacked\n    xStacked?: number | null\n    y: number | string | Date\n    // only numbers can be stacked\n    yStacked?: number | null\n}\n\ntype Serie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: D[]\n}\n\ntype NestedSerie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: {\n        data: D\n    }[]\n}\n\nexport type ComputedSerie<S = never, D extends SerieDatum = SerieDatum> = S & {\n    data: {\n        data: D\n        position: {\n            x: number | null\n            y: number | null\n        }\n    }[]\n}\n\ntype Compare = <T>(a: T, b: T) => boolean\n\nexport const getOtherAxis = (axis: ScaleAxis): ScaleAxis => (axis === 'x' ? 'y' : 'x')\n\nexport const compareValues = (a: string | number, b: string | number) => a === b\nexport const compareDateValues = (a: Date, b: Date) => a.getTime() === b.getTime()\n\nexport function computeScale<Input extends ScaleValue>(\n    spec: ScaleSpec,\n    data: ComputedSerieAxis<any>,\n    size: number,\n    axis: ScaleAxis\n) {\n    switch (spec.type) {\n        case 'linear':\n            return createLinearScale(spec, data, size, axis)\n        case 'point':\n            return createPointScale<Input>(spec, data, size)\n        case 'band':\n            return createBandScale<Input>(spec, data, size, axis)\n        case 'time':\n            return createTimeScale(spec, data, size)\n        case 'log':\n            return createLogScale(spec, data, size, axis)\n        case 'symlog':\n            return createSymlogScale(spec, data, size, axis)\n        default:\n            throw new Error('invalid scale spec')\n    }\n}\n\n/**\n * Convert serie data to have the original data stored in a nested prop.\n *\n * We do this in order to avoid conflicts between raw & computed properties.\n * <- { data: { x: 1, y: 3 }[] }\n * -> { data: { data: { x: 1, y: 3 } }[] }\n */\nconst nestSerieData = <S = never, D extends SerieDatum = SerieDatum>(\n    serie: Serie<S, D>\n): NestedSerie<S, D> => ({\n    ...serie,\n    data: serie.data.map(d => ({ data: { ...d } })),\n})\n\nconst getDatumAxisPosition = <D extends SerieDatum = SerieDatum>(\n    datum: { data: D },\n    axis: ScaleAxis,\n    scale: any\n): number | null => {\n    if ('stacked' in scale && scale.stacked) {\n        const stackedValue = datum.data[axis === 'x' ? 'xStacked' : 'yStacked']\n        if (stackedValue === null || stackedValue === undefined) {\n            return null\n        }\n\n        return scale(stackedValue)\n    }\n\n    return scale(datum.data[axis]) ?? null\n}\n\n/**\n * Compute x/y d3 scales from an array of data series, and scale specifications.\n *\n * We use generics as it's not uncommon to have extra properties such as an id\n * added to the series, or extra props on data, in such case, you should override\n * the default types.\n */\nexport const computeXYScalesForSeries = <S = never, D extends SerieDatum = SerieDatum>(\n    series: Serie<S, D>[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec,\n    width: number,\n    height: number\n) => {\n    // first nest series to avoid property conflicts\n    const nestedSeries = series.map(serie => nestSerieData<S, D>(serie))\n\n    // then compute data for each axis: all, min, max values\n    const xy = generateSeriesXY<S, D>(nestedSeries, xScaleSpec, yScaleSpec)\n\n    // stack x values depending on xScale\n    if ('stacked' in xScaleSpec && xScaleSpec.stacked === true) {\n        stackX<S, D>(xy as StackedXY, nestedSeries)\n    }\n\n    // stack y values depending on yScale\n    if ('stacked' in yScaleSpec && yScaleSpec.stacked === true) {\n        stackY<S, D>(xy as StackedXY, nestedSeries)\n    }\n\n    // computes scales\n    const xScale = computeScale<D['x']>(xScaleSpec, xy.x, width, 'x')\n    const yScale = computeScale<D['y']>(yScaleSpec, xy.y, height, 'y')\n\n    // assign position to each datum in every scale\n    const computedSeries: ComputedSerie<S, D>[] = nestedSeries.map(serie => ({\n        ...serie,\n        data: serie.data.map(datum => ({\n            ...datum,\n            position: {\n                x: getDatumAxisPosition(datum, 'x', xScale),\n                y: getDatumAxisPosition(datum, 'y', yScale),\n            },\n        })),\n    }))\n\n    return {\n        ...xy,\n        series: computedSeries,\n        xScale,\n        yScale,\n    }\n}\n\nexport const generateSeriesXY = <S = never, D extends SerieDatum = SerieDatum>(\n    series: NestedSerie<S, D>[],\n    xScaleSpec: ScaleSpec,\n    yScaleSpec: ScaleSpec\n) => ({\n    x: generateSeriesAxis<'x', D['x']>(series, 'x', xScaleSpec),\n    y: generateSeriesAxis<'y', D['y']>(series, 'y', yScaleSpec),\n})\n\n/**\n * Normalize data according to scale type, (time => Date, linear => Number)\n * compute sorted unique values and min/max.\n */\nexport const generateSeriesAxis = <Axis extends ScaleAxis, Value extends ScaleValue>(\n    series: SerieAxis<Axis, Value>,\n    axis: Axis,\n    scaleSpec: ScaleSpec,\n    {\n        getValue = d => d.data[axis],\n        setValue = (d, v) => {\n            d.data[axis] = v\n        },\n    }: {\n        getValue?: (d: { data: Record<Axis, Value | null> }) => Value | null\n        setValue?: (d: { data: Record<Axis, Value | null> }, v: Value) => void\n    } = {}\n) => {\n    if (scaleSpec.type === 'linear') {\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, parseFloat(String(value)) as unknown as Value)\n                }\n            })\n        })\n    } else if (scaleSpec.type === 'time' && scaleSpec.format !== 'native') {\n        // `native` means we already have Date instances,\n        // otherwise we have to convert the values to Date.\n        const parseTime = createDateNormalizer(scaleSpec)\n\n        series.forEach(serie => {\n            serie.data.forEach(d => {\n                const value = getValue(d)\n\n                if (value) {\n                    setValue(d, parseTime(value as Date) as unknown as Value)\n                }\n            })\n        })\n    }\n\n    const values: unknown[] = []\n\n    series.forEach(serie => {\n        serie.data.forEach(d => {\n            values.push(getValue(d))\n        })\n    })\n\n    switch (scaleSpec.type) {\n        case 'linear': {\n            const all = sortBy(\n                // filer null values to deal with holes in linechart\n                uniq(values as number[]).filter(v => v !== null),\n                v => v\n            )\n\n            return { all, min: Math.min(...all), max: Math.max(...all) }\n        }\n        case 'time': {\n            const all = uniqBy(values as Date[], v => v.getTime())\n                .slice(0)\n                .sort((a, b) => b.getTime() - a.getTime())\n                .reverse()\n\n            return { all, min: all[0], max: last(all) }\n        }\n        default: {\n            const all = uniq(values)\n\n            return { all, min: all[0], max: last(all) }\n        }\n    }\n}\n\nexport const stackAxis = <S = never, D extends SerieDatum = SerieDatum>(\n    axis: ScaleAxis,\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => {\n    const otherAxis = getOtherAxis(axis)\n    const all: number[] = []\n\n    xy[otherAxis].all.forEach(v => {\n        const compare = (isDate(v) ? compareDateValues : compareValues) as Compare\n        const stack: Array<number | null> = []\n\n        series.forEach(serie => {\n            const datum = serie.data.find(d => compare(d.data[otherAxis], v))\n            let value = null\n            let stackValue = null\n\n            if (datum !== undefined) {\n                // stacked values only support numbers\n                value = datum.data[axis] as number\n                if (value !== null) {\n                    const head = last(stack)\n                    if (head === undefined) {\n                        stackValue = value\n                    } else if (head !== null) {\n                        stackValue = head + value\n                    }\n                }\n\n                datum.data[axis === 'x' ? 'xStacked' : 'yStacked'] = stackValue\n            }\n\n            stack.push(stackValue)\n\n            if (stackValue !== null) {\n                all.push(stackValue)\n            }\n        })\n    })\n\n    xy[axis].minStacked = Math.min(...all)\n    xy[axis].maxStacked = Math.max(...all)\n}\n\nconst stackX = <S = never, D extends SerieDatum = SerieDatum>(\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => stackAxis<S, D>('x', xy, series)\n\nconst stackY = <S = never, D extends SerieDatum = SerieDatum>(\n    xy: StackedXY,\n    series: NestedSerie<S, D>[]\n) => stackAxis<S, D>('y', xy, series)\n", "import {\n    CountableTimeInterval,\n    timeMillisecond,\n    utcMillisecond,\n    timeSecond,\n    utcSecond,\n    timeMinute,\n    utcMinute,\n    timeHour,\n    utcHour,\n    timeWeek,\n    utcWeek,\n    timeSunday,\n    utcSunday,\n    timeMonday,\n    utcMonday,\n    timeTuesday,\n    utcTuesday,\n    timeWednesday,\n    utcWednesday,\n    timeThursday,\n    utcThursday,\n    timeFriday,\n    utcFriday,\n    timeSaturday,\n    utcSaturday,\n    timeMonth,\n    utcMonth,\n    timeYear,\n    utcYear,\n    timeInterval,\n} from 'd3-time'\nimport { ScaleValue, TicksSpec, AnyScale, ScaleWithBandwidth } from './types'\n\nexport const centerScale = <Value>(scale: ScaleWithBandwidth) => {\n    const bandwidth = scale.bandwidth()\n\n    if (bandwidth === 0) return scale\n\n    let offset = bandwidth / 2\n    if (scale.round()) {\n        offset = Math.round(offset)\n    }\n\n    return <T extends Value>(d: T) => (scale(d) ?? 0) + offset\n}\n\nconst timeDay = timeInterval(\n    date => date.setHours(0, 0, 0, 0),\n    (date, step) => date.setDate(date.getDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst utcDay = timeInterval(\n    date => date.setUTCHours(0, 0, 0, 0),\n    (date, step) => date.setUTCDate(date.getUTCDate() + step),\n    (start, end) => (end.getTime() - start.getTime()) / 864e5,\n    date => Math.floor(date.getTime() / 864e5)\n)\n\nconst timeByType: Record<string, [CountableTimeInterval, CountableTimeInterval]> = {\n    millisecond: [timeMillisecond, utcMillisecond],\n    second: [timeSecond, utcSecond],\n    minute: [timeMinute, utcMinute],\n    hour: [timeHour, utcHour],\n    day: [timeDay, utcDay],\n    week: [timeWeek, utcWeek],\n    sunday: [timeSunday, utcSunday],\n    monday: [timeMonday, utcMonday],\n    tuesday: [timeTuesday, utcTuesday],\n    wednesday: [timeWednesday, utcWednesday],\n    thursday: [timeThursday, utcThursday],\n    friday: [timeFriday, utcFriday],\n    saturday: [timeSaturday, utcSaturday],\n    month: [timeMonth, utcMonth],\n    year: [timeYear, utcYear],\n}\n\nconst timeTypes = Object.keys(timeByType)\nconst timeIntervalRegexp = new RegExp(`^every\\\\s*(\\\\d+)?\\\\s*(${timeTypes.join('|')})s?$`, 'i')\n\nconst isInteger = (value: unknown): value is number =>\n    typeof value === 'number' && isFinite(value) && Math.floor(value) === value\n\nexport const getScaleTicks = <Value extends ScaleValue>(\n    scale: AnyScale,\n    spec?: TicksSpec<Value>\n) => {\n    // specific values\n    if (Array.isArray(spec)) {\n        return spec\n    }\n\n    if (typeof spec === 'string' && 'useUTC' in scale) {\n        // time interval\n        const matches = spec.match(timeIntervalRegexp)\n\n        if (matches) {\n            const [, amount, type] = matches\n            // UTC is used as it's more predictable\n            // however local time could be used too\n            // let's see how it fits users' requirements\n            const timeType = timeByType[type][scale.useUTC ? 1 : 0]\n\n            if (type === 'day') {\n                const [start, originalStop] = scale.domain()\n                const stop = new Date(originalStop)\n\n                // Set range to include last day in the domain since `interval.range` function is exclusive stop\n                stop.setDate(stop.getDate() + 1)\n\n                return timeType.every(Number(amount ?? 1))?.range(start, stop) ?? []\n            }\n\n            if (amount === undefined) {\n                return scale.ticks(timeType)\n            }\n\n            const interval = timeType.every(Number(amount))\n\n            if (interval) {\n                return scale.ticks(interval)\n            }\n        }\n\n        throw new Error(`Invalid tickValues: ${spec}`)\n    }\n\n    // continuous scales\n    if ('ticks' in scale) {\n        // default behaviour\n        if (spec === undefined) {\n            return scale.ticks()\n        }\n\n        // specific tick count\n        if (isInteger(spec)) {\n            return scale.ticks(spec)\n        }\n    }\n\n    // non linear scale default\n    return scale.domain()\n}\n", "import { timeFormat } from 'd3-time-format'\nimport { format as d3Format } from 'd3-format'\n// @ts-ignore\nimport { textPropsByEngine } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec, getScaleTicks, centerScale } from '@nivo/scales'\nimport { Point, ValueFormatter, Line } from './types'\n\nconst isArray = <T>(value: unknown): value is T[] => Array.isArray(value)\n\nexport const computeCartesianTicks = <Value extends ScaleValue>({\n    axis,\n    scale,\n    ticksPosition,\n    tickValues,\n    tickSize,\n    tickPadding,\n    tickRotation,\n    engine = 'svg',\n}: {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    ticksPosition?: 'after' | 'before'\n    tickValues?: TicksSpec<Value>\n    tickSize: number\n    tickPadding: number\n    tickRotation: number\n    engine?: 'svg' | 'canvas'\n}) => {\n    const values = getScaleTicks<Value>(scale, tickValues)\n\n    const textProps = textPropsByEngine[engine]\n\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n    const line = { lineX: 0, lineY: 0 }\n    const text = { textX: 0, textY: 0 }\n\n    const isRTL = typeof document === 'object' ? document.dir === 'rtl' : false\n    let translate: (value: Value) => Point\n    let textAlign: CanvasTextAlign = textProps.align.center\n    let textBaseline: CanvasTextBaseline = textProps.baseline.center\n\n    if (axis === 'x') {\n        translate = d => ({ x: position(d) ?? 0, y: 0 })\n\n        line.lineY = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textY = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textBaseline = textProps.baseline.top\n        } else {\n            textBaseline = textProps.baseline.bottom\n        }\n\n        if (tickRotation === 0) {\n            textAlign = textProps.align.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation < 0) ||\n            (ticksPosition === 'before' && tickRotation > 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'left' : 'right']\n            textBaseline = textProps.baseline.center\n        } else if (\n            (ticksPosition === 'after' && tickRotation > 0) ||\n            (ticksPosition === 'before' && tickRotation < 0)\n        ) {\n            textAlign = textProps.align[isRTL ? 'right' : 'left']\n            textBaseline = textProps.baseline.center\n        }\n    } else {\n        translate = d => ({ x: 0, y: position(d) ?? 0 })\n\n        line.lineX = tickSize * (ticksPosition === 'after' ? 1 : -1)\n        text.textX = (tickSize + tickPadding) * (ticksPosition === 'after' ? 1 : -1)\n\n        if (ticksPosition === 'after') {\n            textAlign = textProps.align.left\n        } else {\n            textAlign = textProps.align.right\n        }\n    }\n\n    const ticks = values.map((value: Value) => ({\n        key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n        value,\n        ...translate(value),\n        ...line,\n        ...text,\n    }))\n\n    return {\n        ticks,\n        textAlign,\n        textBaseline,\n    }\n}\n\nexport const getFormatter = <Value extends ScaleValue>(\n    format: string | ValueFormatter<Value> | undefined,\n    scale: AnyScale\n): ValueFormatter<Value> | undefined => {\n    if (typeof format === 'undefined' || typeof format === 'function') return format\n\n    if (scale.type === 'time') {\n        const formatter = timeFormat(format)\n\n        return ((d: any) => formatter(d instanceof Date ? d : new Date(d))) as ValueFormatter<Value>\n    }\n\n    return d3Format(format) as unknown as ValueFormatter<Value>\n}\n\nexport const computeGridLines = <Value extends ScaleValue>({\n    width,\n    height,\n    scale,\n    axis,\n    values: _values,\n}: {\n    width: number\n    height: number\n    scale: AnyScale\n    axis: 'x' | 'y'\n    values?: TicksSpec<Value>\n}) => {\n    const lineValues = isArray<number>(_values) ? _values : undefined\n    const values = lineValues || getScaleTicks<Value>(scale, _values)\n    const position = 'bandwidth' in scale ? centerScale(scale) : scale\n\n    const lines: Line[] =\n        axis === 'x'\n            ? values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: position(value) ?? 0,\n                  x2: position(value) ?? 0,\n                  y1: 0,\n                  y2: height,\n              }))\n            : values.map((value: Value) => ({\n                  key: value instanceof Date ? `${value.valueOf()}` : `${value}`,\n                  x1: 0,\n                  x2: width,\n                  y1: position(value) ?? 0,\n                  y2: position(value) ?? 0,\n              }))\n\n    return lines\n}\n", "import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\nimport { ScaleValue } from '@nivo/scales'\nimport { AxisTickProps } from '../types'\n\nconst AxisTick = <Value extends ScaleValue>({\n    value: _value,\n    format,\n    lineX,\n    lineY,\n    onClick,\n    textBaseline,\n    textAnchor,\n    animatedProps,\n}: AxisTickProps<Value>) => {\n    const theme = useTheme()\n\n    const value = format?.(_value) ?? _value\n\n    const props = useMemo(() => {\n        const style = { opacity: animatedProps.opacity }\n\n        if (!onClick) {\n            return { style }\n        }\n\n        return {\n            style: { ...style, cursor: 'pointer' },\n            onClick: (event: React.MouseEvent<SVGGElement, MouseEvent>) => onClick(event, value),\n        }\n    }, [animatedProps.opacity, onClick, value])\n\n    return (\n        <animated.g transform={animatedProps.transform} {...props}>\n            <line x1={0} x2={lineX} y1={0} y2={lineY} style={theme.axis.ticks.line} />\n            <animated.text\n                dominantBaseline={textBaseline}\n                textAnchor={textAnchor}\n                transform={animatedProps.textTransform}\n                style={theme.axis.ticks.text}\n            >\n                {value}\n            </animated.text>\n        </animated.g>\n    )\n}\n\nconst memoizedAxisTick = memo(AxisTick) as typeof AxisTick\n\nexport { memoizedAxisTick as AxisTick }\n", "import { useMemo, memo } from 'react'\nimport * as React from 'react'\nimport { useSpring, useTransition, animated } from '@react-spring/web'\nimport { useTheme, useMotionConfig } from '@nivo/core'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter } from '../compute'\nimport { AxisTick } from './AxisTick'\nimport { AxisProps } from '../types'\n\nconst Axis = <Value extends ScaleValue>({\n    axis,\n    scale,\n    x = 0,\n    y = 0,\n    length,\n    ticksPosition,\n    tickValues,\n    tickSize = 5,\n    tickPadding = 5,\n    tickRotation = 0,\n    format,\n    renderTick = AxisTick,\n    legend,\n    legendPosition = 'end',\n    legendOffset = 0,\n    onClick,\n    ariaHidden,\n}: AxisProps<Value> & {\n    axis: 'x' | 'y'\n    scale: AnyScale\n    x?: number\n    y?: number\n    length: number\n    onClick?: (event: React.MouseEvent<SVGGElement, MouseEvent>, value: Value | string) => void\n}) => {\n    const theme = useTheme()\n\n    const formatValue = useMemo(() => getFormatter(format, scale), [format, scale])\n\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n    })\n\n    let legendNode = null\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAnchor\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAnchor = 'start'\n            } else if (legendPosition === 'middle') {\n                textAnchor = 'middle'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAnchor = 'end'\n                legendX = length\n            }\n        }\n\n        legendNode = (\n            <text\n                transform={`translate(${legendX}, ${legendY}) rotate(${legendRotation})`}\n                textAnchor={textAnchor}\n                style={{\n                    dominantBaseline: 'central',\n                    ...theme.axis.legend.text,\n                }}\n            >\n                {legend}\n            </text>\n        )\n    }\n\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedProps = useSpring({\n        transform: `translate(${x},${y})`,\n        lineX2: axis === 'x' ? length : 0,\n        lineY2: axis === 'x' ? 0 : length,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    const transition = useTransition<\n        typeof ticks[0],\n        { opacity: number; transform: string; textTransform: string }\n    >(ticks, {\n        keys: tick => tick.key,\n        initial: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        from: tick => ({\n            opacity: 0,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        enter: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        update: tick => ({\n            opacity: 1,\n            transform: `translate(${tick.x},${tick.y})`,\n            textTransform: `translate(${tick.textX},${tick.textY}) rotate(${tickRotation})`,\n        }),\n        leave: {\n            opacity: 0,\n        },\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.g transform={animatedProps.transform} aria-hidden={ariaHidden}>\n            {transition((transitionProps, tick, _state, tickIndex) => {\n                return React.createElement(renderTick, {\n                    tickIndex,\n                    format: formatValue,\n                    rotate: tickRotation,\n                    textBaseline,\n                    textAnchor: textAlign,\n                    animatedProps: transitionProps,\n                    ...tick,\n                    ...(onClick ? { onClick } : {}),\n                })\n            })}\n            <animated.line\n                style={theme.axis.domain.line}\n                x1={0}\n                x2={animatedProps.lineX2}\n                y1={0}\n                y2={animatedProps.lineY2}\n            />\n            {legendNode}\n        </animated.g>\n    )\n}\n\nconst memoizedAxis = memo(Axis) as typeof Axis\n\nexport { memoizedAxis as Axis }\n", "import PropTypes from 'prop-types'\n\nexport const axisPropTypes = {\n    ticksPosition: PropTypes.oneOf(['before', 'after']),\n    tickValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n        PropTypes.string,\n    ]),\n    tickSize: PropTypes.number,\n    tickPadding: PropTypes.number,\n    tickRotation: PropTypes.number,\n    format: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    renderTick: PropTypes.func,\n    legend: PropTypes.node,\n    legendPosition: PropTypes.oneOf(['start', 'middle', 'end']),\n    legendOffset: PropTypes.number,\n    ariaHidden: PropTypes.bool,\n}\n\nexport const axisPropType = PropTypes.shape(axisPropTypes)\n\nexport const positions = ['top', 'right', 'bottom', 'left'] as const\n", "import { memo } from 'react'\nimport { ScaleValue, AnyScale } from '@nivo/scales'\nimport { Axis } from './Axis'\nimport { positions } from '../props'\nimport { AxisProps } from '../types'\n\nexport const Axes = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        xScale,\n        yScale,\n        width,\n        height,\n        top,\n        right,\n        bottom,\n        left,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: AxisProps<X> | null\n        right?: AxisProps<Y> | null\n        bottom?: AxisProps<X> | null\n        left?: AxisProps<Y> | null\n    }) => {\n        const axes = { top, right, bottom, left }\n\n        return (\n            <>\n                {positions.map(position => {\n                    const axis = axes[position] as typeof position extends 'bottom' | 'top'\n                        ? AxisProps<X> | undefined\n                        : AxisProps<Y> | undefined\n\n                    if (!axis) return null\n\n                    const isXAxis = position === 'top' || position === 'bottom'\n                    const ticksPosition =\n                        position === 'top' || position === 'left' ? 'before' : 'after'\n\n                    return (\n                        <Axis\n                            key={position}\n                            {...axis}\n                            axis={isXAxis ? 'x' : 'y'}\n                            x={position === 'right' ? width : 0}\n                            y={position === 'bottom' ? height : 0}\n                            scale={isXAxis ? xScale : yScale}\n                            length={isXAxis ? width : height}\n                            ticksPosition={ticksPosition}\n                        />\n                    )\n                })}\n            </>\n        )\n    }\n)\n", "import { memo } from 'react'\nimport { SpringValues, animated } from '@react-spring/web'\nimport { useTheme } from '@nivo/core'\n\nexport const GridLine = memo(\n    ({\n        animatedProps,\n    }: {\n        animatedProps: SpringValues<{\n            opacity: number\n            x1: number\n            x2: number\n            y1: number\n            y2: number\n        }>\n    }) => {\n        const theme = useTheme()\n\n        return <animated.line {...animatedProps} {...(theme.grid.line as unknown)} />\n    }\n)\n", "import { memo } from 'react'\nimport { useTransition } from '@react-spring/web'\nimport { useMotionConfig } from '@nivo/core'\nimport { GridLine } from './GridLine'\nimport { Line } from '../types'\n\nexport const GridLines = memo(({ lines }: { lines: Line[] }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const transition = useTransition<Line, Record<'opacity' | 'x1' | 'x2' | 'y1' | 'y2', number>>(\n        lines,\n        {\n            keys: line => line.key,\n            initial: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            from: line => ({\n                opacity: 0,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            enter: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            update: line => ({\n                opacity: 1,\n                x1: line.x1,\n                x2: line.x2,\n                y1: line.y1,\n                y2: line.y2,\n            }),\n            leave: {\n                opacity: 0,\n            },\n            config: springConfig,\n            immediate: !animate,\n        }\n    )\n\n    return (\n        <g>\n            {transition((animatedProps, line) => (\n                <GridLine {...line} key={line.key} animatedProps={animatedProps} />\n            ))}\n        </g>\n    )\n})\n", "import { useMemo, memo } from 'react'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { GridLines } from './GridLines'\nimport { computeGridLines } from '../compute'\n\nexport const Grid = memo(\n    <X extends ScaleValue, Y extends ScaleValue>({\n        width,\n        height,\n        xScale,\n        yScale,\n        xValues,\n        yValues,\n    }: {\n        width: number\n        height: number\n        xScale?: AnyScale | null\n        xValues?: TicksSpec<X>\n        yScale?: AnyScale | null\n        yValues?: TicksSpec<Y>\n    }) => {\n        const xLines = useMemo(() => {\n            if (!xScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: xScale,\n                axis: 'x',\n                values: xValues,\n            })\n        }, [xScale, xValues, width, height])\n\n        const yLines = useMemo(() => {\n            if (!yScale) return false\n\n            return computeGridLines({\n                width,\n                height,\n                scale: yScale,\n                axis: 'y',\n                values: yValues,\n            })\n        }, [height, width, yScale, yValues])\n\n        return (\n            <>\n                {xLines && <GridLines lines={xLines} />}\n                {yLines && <GridLines lines={yLines} />}\n            </>\n        )\n    }\n)\n", "import { degreesToRadians, CompleteTheme } from '@nivo/core'\nimport { ScaleValue, AnyScale, TicksSpec } from '@nivo/scales'\nimport { computeCartesianTicks, getFormatter, computeGridLines } from './compute'\nimport { positions } from './props'\nimport { AxisLegendPosition, CanvasAxisProps, ValueFormatter } from './types'\n\nexport const renderAxisToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        axis,\n        scale,\n        x = 0,\n        y = 0,\n        length,\n\n        ticksPosition,\n        tickValues,\n        tickSize = 5,\n        tickPadding = 5,\n        tickRotation = 0,\n        format: _format,\n\n        legend,\n        legendPosition = 'end',\n        legendOffset = 0,\n\n        theme,\n    }: {\n        axis: 'x' | 'y'\n        scale: AnyScale\n        x?: number\n        y?: number\n        length: number\n        ticksPosition: 'before' | 'after'\n        tickValues?: TicksSpec<Value>\n        tickSize?: number\n        tickPadding?: number\n        tickRotation?: number\n        format?: string | ValueFormatter<Value>\n        legend?: string\n        legendPosition?: AxisLegendPosition\n        legendOffset?: number\n        theme: CompleteTheme\n    }\n) => {\n    const { ticks, textAlign, textBaseline } = computeCartesianTicks({\n        axis,\n        scale,\n        ticksPosition,\n        tickValues,\n        tickSize,\n        tickPadding,\n        tickRotation,\n        engine: 'canvas',\n    })\n\n    ctx.save()\n    ctx.translate(x, y)\n\n    ctx.textAlign = textAlign\n    ctx.textBaseline = textBaseline\n    ctx.font = `${theme.axis.ticks.text.fontWeight ? `${theme.axis.ticks.text.fontWeight} ` : ''}${\n        theme.axis.ticks.text.fontSize\n    }px ${theme.axis.ticks.text.fontFamily}`\n\n    if ((theme.axis.domain.line.strokeWidth ?? 0) > 0) {\n        ctx.lineWidth = Number(theme.axis.domain.line.strokeWidth)\n        ctx.lineCap = 'square'\n\n        if (theme.axis.domain.line.stroke) {\n            ctx.strokeStyle = theme.axis.domain.line.stroke\n        }\n\n        ctx.beginPath()\n        ctx.moveTo(0, 0)\n        ctx.lineTo(axis === 'x' ? length : 0, axis === 'x' ? 0 : length)\n        ctx.stroke()\n    }\n\n    const format = typeof _format === 'function' ? _format : (value: unknown) => `${value}`\n\n    ticks.forEach(tick => {\n        if ((theme.axis.ticks.line.strokeWidth ?? 0) > 0) {\n            ctx.lineWidth = Number(theme.axis.ticks.line.strokeWidth)\n            ctx.lineCap = 'square'\n\n            if (theme.axis.ticks.line.stroke) {\n                ctx.strokeStyle = theme.axis.ticks.line.stroke\n            }\n\n            ctx.beginPath()\n            ctx.moveTo(tick.x, tick.y)\n            ctx.lineTo(tick.x + tick.lineX, tick.y + tick.lineY)\n            ctx.stroke()\n        }\n\n        const value = format(tick.value)\n\n        ctx.save()\n        ctx.translate(tick.x + tick.textX, tick.y + tick.textY)\n        ctx.rotate(degreesToRadians(tickRotation))\n\n        if (theme.axis.ticks.text.fill) {\n            ctx.fillStyle = theme.axis.ticks.text.fill\n        }\n\n        ctx.fillText(String(value), 0, 0)\n        ctx.restore()\n    })\n\n    if (legend !== undefined) {\n        let legendX = 0\n        let legendY = 0\n        let legendRotation = 0\n        let textAlign: CanvasTextAlign = 'center'\n\n        if (axis === 'y') {\n            legendRotation = -90\n            legendX = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n                legendY = length\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendY = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n            }\n        } else {\n            legendY = legendOffset\n            if (legendPosition === 'start') {\n                textAlign = 'start'\n            } else if (legendPosition === 'middle') {\n                textAlign = 'center'\n                legendX = length / 2\n            } else if (legendPosition === 'end') {\n                textAlign = 'end'\n                legendX = length\n            }\n        }\n\n        ctx.translate(legendX, legendY)\n        ctx.rotate(degreesToRadians(legendRotation))\n        ctx.font = `${\n            theme.axis.legend.text.fontWeight ? `${theme.axis.legend.text.fontWeight} ` : ''\n        }${theme.axis.legend.text.fontSize}px ${theme.axis.legend.text.fontFamily}`\n\n        if (theme.axis.legend.text.fill) {\n            ctx.fillStyle = theme.axis.legend.text.fill\n        }\n\n        ctx.textAlign = textAlign\n        ctx.textBaseline = 'middle'\n        ctx.fillText(legend, 0, 0)\n    }\n\n    ctx.restore()\n}\n\nexport const renderAxesToCanvas = <X extends ScaleValue, Y extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        xScale,\n        yScale,\n        width,\n        height,\n\n        top,\n        right,\n        bottom,\n        left,\n\n        theme,\n    }: {\n        xScale: AnyScale\n        yScale: AnyScale\n        width: number\n        height: number\n        top?: CanvasAxisProps<X> | null\n        right?: CanvasAxisProps<Y> | null\n        bottom?: CanvasAxisProps<X> | null\n        left?: CanvasAxisProps<Y> | null\n        theme: CompleteTheme\n    }\n) => {\n    const axes = { top, right, bottom, left }\n\n    positions.forEach(position => {\n        const axis = axes[position] as typeof position extends 'bottom' | 'top'\n            ? CanvasAxisProps<X> | undefined\n            : CanvasAxisProps<Y> | undefined\n\n        if (!axis) return null\n\n        const isXAxis = position === 'top' || position === 'bottom'\n        const ticksPosition = position === 'top' || position === 'left' ? 'before' : 'after'\n        const scale = isXAxis ? xScale : yScale\n        const format = getFormatter(axis.format, scale)\n\n        renderAxisToCanvas(ctx, {\n            ...axis,\n            axis: isXAxis ? 'x' : 'y',\n            x: position === 'right' ? width : 0,\n            y: position === 'bottom' ? height : 0,\n            scale,\n            format,\n            length: isXAxis ? width : height,\n            ticksPosition,\n            theme,\n        })\n    })\n}\n\nexport const renderGridLinesToCanvas = <Value extends ScaleValue>(\n    ctx: CanvasRenderingContext2D,\n    {\n        width,\n        height,\n        scale,\n        axis,\n        values,\n    }: {\n        width: number\n        height: number\n        scale: AnyScale\n        axis: 'x' | 'y'\n        values?: TicksSpec<Value>\n    }\n) => {\n    const lines = computeGridLines({ width, height, scale, axis, values })\n\n    lines.forEach(line => {\n        ctx.beginPath()\n        ctx.moveTo(line.x1, line.y1)\n        ctx.lineTo(line.x2, line.y2)\n        ctx.stroke()\n    })\n}\n", "\nconst EPSILON = Math.pow(2, -52);\nconst EDGE_STACK = new Uint32Array(512);\n\nexport default class Delaunator {\n\n    static from(points, getX = defaultGetX, getY = defaultGetY) {\n        const n = points.length;\n        const coords = new Float64Array(n * 2);\n\n        for (let i = 0; i < n; i++) {\n            const p = points[i];\n            coords[2 * i] = getX(p);\n            coords[2 * i + 1] = getY(p);\n        }\n\n        return new Delaunator(coords);\n    }\n\n    constructor(coords) {\n        const n = coords.length >> 1;\n        if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.');\n\n        this.coords = coords;\n\n        // arrays that will store the triangulation graph\n        const maxTriangles = Math.max(2 * n - 5, 0);\n        this._triangles = new Uint32Array(maxTriangles * 3);\n        this._halfedges = new Int32Array(maxTriangles * 3);\n\n        // temporary arrays for tracking the edges of the advancing convex hull\n        this._hashSize = Math.ceil(Math.sqrt(n));\n        this._hullPrev = new Uint32Array(n); // edge to prev edge\n        this._hullNext = new Uint32Array(n); // edge to next edge\n        this._hullTri = new Uint32Array(n); // edge to adjacent triangle\n        this._hullHash = new Int32Array(this._hashSize).fill(-1); // angular edge hash\n\n        // temporary arrays for sorting points\n        this._ids = new Uint32Array(n);\n        this._dists = new Float64Array(n);\n\n        this.update();\n    }\n\n    update() {\n        const {coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash} =  this;\n        const n = coords.length >> 1;\n\n        // populate an array of point indices; calculate input data bbox\n        let minX = Infinity;\n        let minY = Infinity;\n        let maxX = -Infinity;\n        let maxY = -Infinity;\n\n        for (let i = 0; i < n; i++) {\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n            if (x < minX) minX = x;\n            if (y < minY) minY = y;\n            if (x > maxX) maxX = x;\n            if (y > maxY) maxY = y;\n            this._ids[i] = i;\n        }\n        const cx = (minX + maxX) / 2;\n        const cy = (minY + maxY) / 2;\n\n        let minDist = Infinity;\n        let i0, i1, i2;\n\n        // pick a seed point close to the center\n        for (let i = 0; i < n; i++) {\n            const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist) {\n                i0 = i;\n                minDist = d;\n            }\n        }\n        const i0x = coords[2 * i0];\n        const i0y = coords[2 * i0 + 1];\n\n        minDist = Infinity;\n\n        // find the point closest to the seed\n        for (let i = 0; i < n; i++) {\n            if (i === i0) continue;\n            const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1]);\n            if (d < minDist && d > 0) {\n                i1 = i;\n                minDist = d;\n            }\n        }\n        let i1x = coords[2 * i1];\n        let i1y = coords[2 * i1 + 1];\n\n        let minRadius = Infinity;\n\n        // find the third point which forms the smallest circumcircle with the first two\n        for (let i = 0; i < n; i++) {\n            if (i === i0 || i === i1) continue;\n            const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1]);\n            if (r < minRadius) {\n                i2 = i;\n                minRadius = r;\n            }\n        }\n        let i2x = coords[2 * i2];\n        let i2y = coords[2 * i2 + 1];\n\n        if (minRadius === Infinity) {\n            // order collinear points by dx (or dy if all x are identical)\n            // and return the list as a hull\n            for (let i = 0; i < n; i++) {\n                this._dists[i] = (coords[2 * i] - coords[0]) || (coords[2 * i + 1] - coords[1]);\n            }\n            quicksort(this._ids, this._dists, 0, n - 1);\n            const hull = new Uint32Array(n);\n            let j = 0;\n            for (let i = 0, d0 = -Infinity; i < n; i++) {\n                const id = this._ids[i];\n                if (this._dists[id] > d0) {\n                    hull[j++] = id;\n                    d0 = this._dists[id];\n                }\n            }\n            this.hull = hull.subarray(0, j);\n            this.triangles = new Uint32Array(0);\n            this.halfedges = new Uint32Array(0);\n            return;\n        }\n\n        // swap the order of the seed points for counter-clockwise orientation\n        if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {\n            const i = i1;\n            const x = i1x;\n            const y = i1y;\n            i1 = i2;\n            i1x = i2x;\n            i1y = i2y;\n            i2 = i;\n            i2x = x;\n            i2y = y;\n        }\n\n        const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y);\n        this._cx = center.x;\n        this._cy = center.y;\n\n        for (let i = 0; i < n; i++) {\n            this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y);\n        }\n\n        // sort the points by distance from the seed triangle circumcenter\n        quicksort(this._ids, this._dists, 0, n - 1);\n\n        // set up the seed triangle as the starting hull\n        this._hullStart = i0;\n        let hullSize = 3;\n\n        hullNext[i0] = hullPrev[i2] = i1;\n        hullNext[i1] = hullPrev[i0] = i2;\n        hullNext[i2] = hullPrev[i1] = i0;\n\n        hullTri[i0] = 0;\n        hullTri[i1] = 1;\n        hullTri[i2] = 2;\n\n        hullHash.fill(-1);\n        hullHash[this._hashKey(i0x, i0y)] = i0;\n        hullHash[this._hashKey(i1x, i1y)] = i1;\n        hullHash[this._hashKey(i2x, i2y)] = i2;\n\n        this.trianglesLen = 0;\n        this._addTriangle(i0, i1, i2, -1, -1, -1);\n\n        for (let k = 0, xp, yp; k < this._ids.length; k++) {\n            const i = this._ids[k];\n            const x = coords[2 * i];\n            const y = coords[2 * i + 1];\n\n            // skip near-duplicate points\n            if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue;\n            xp = x;\n            yp = y;\n\n            // skip seed triangle points\n            if (i === i0 || i === i1 || i === i2) continue;\n\n            // find a visible edge on the convex hull using edge hash\n            let start = 0;\n            for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {\n                start = hullHash[(key + j) % this._hashSize];\n                if (start !== -1 && start !== hullNext[start]) break;\n            }\n\n            start = hullPrev[start];\n            let e = start, q;\n            while (q = hullNext[e], !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1])) {\n                e = q;\n                if (e === start) {\n                    e = -1;\n                    break;\n                }\n            }\n            if (e === -1) continue; // likely a near-duplicate point; skip it\n\n            // add the first triangle from the point\n            let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e]);\n\n            // recursively flip triangles from the point until they satisfy the Delaunay condition\n            hullTri[i] = this._legalize(t + 2);\n            hullTri[e] = t; // keep track of boundary triangles on the hull\n            hullSize++;\n\n            // walk forward through the hull, adding more triangles and flipping recursively\n            let n = hullNext[e];\n            while (q = hullNext[n], orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1])) {\n                t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n]);\n                hullTri[i] = this._legalize(t + 2);\n                hullNext[n] = n; // mark as removed\n                hullSize--;\n                n = q;\n            }\n\n            // walk backward from the other side, adding more triangles and flipping\n            if (e === start) {\n                while (q = hullPrev[e], orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1])) {\n                    t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q]);\n                    this._legalize(t + 2);\n                    hullTri[q] = t;\n                    hullNext[e] = e; // mark as removed\n                    hullSize--;\n                    e = q;\n                }\n            }\n\n            // update the hull indices\n            this._hullStart = hullPrev[i] = e;\n            hullNext[e] = hullPrev[n] = i;\n            hullNext[i] = n;\n\n            // save the two new edges in the hash table\n            hullHash[this._hashKey(x, y)] = i;\n            hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e;\n        }\n\n        this.hull = new Uint32Array(hullSize);\n        for (let i = 0, e = this._hullStart; i < hullSize; i++) {\n            this.hull[i] = e;\n            e = hullNext[e];\n        }\n\n        // trim typed triangle mesh arrays\n        this.triangles = this._triangles.subarray(0, this.trianglesLen);\n        this.halfedges = this._halfedges.subarray(0, this.trianglesLen);\n    }\n\n    _hashKey(x, y) {\n        return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize;\n    }\n\n    _legalize(a) {\n        const {_triangles: triangles, _halfedges: halfedges, coords} = this;\n\n        let i = 0;\n        let ar = 0;\n\n        // recursion eliminated with a fixed-size stack\n        while (true) {\n            const b = halfedges[a];\n\n            /* if the pair of triangles doesn't satisfy the Delaunay condition\n             * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,\n             * then do the same check/flip recursively for the new pair of triangles\n             *\n             *           pl                    pl\n             *          /||\\                  /  \\\n             *       al/ || \\bl            al/    \\a\n             *        /  ||  \\              /      \\\n             *       /  a||b  \\    flip    /___ar___\\\n             *     p0\\   ||   /p1   =>   p0\\---bl---/p1\n             *        \\  ||  /              \\      /\n             *       ar\\ || /br             b\\    /br\n             *          \\||/                  \\  /\n             *           pr                    pr\n             */\n            const a0 = a - a % 3;\n            ar = a0 + (a + 2) % 3;\n\n            if (b === -1) { // convex hull edge\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n                continue;\n            }\n\n            const b0 = b - b % 3;\n            const al = a0 + (a + 1) % 3;\n            const bl = b0 + (b + 2) % 3;\n\n            const p0 = triangles[ar];\n            const pr = triangles[a];\n            const pl = triangles[al];\n            const p1 = triangles[bl];\n\n            const illegal = inCircle(\n                coords[2 * p0], coords[2 * p0 + 1],\n                coords[2 * pr], coords[2 * pr + 1],\n                coords[2 * pl], coords[2 * pl + 1],\n                coords[2 * p1], coords[2 * p1 + 1]);\n\n            if (illegal) {\n                triangles[a] = p1;\n                triangles[b] = p0;\n\n                const hbl = halfedges[bl];\n\n                // edge swapped on the other side of the hull (rare); fix the halfedge reference\n                if (hbl === -1) {\n                    let e = this._hullStart;\n                    do {\n                        if (this._hullTri[e] === bl) {\n                            this._hullTri[e] = a;\n                            break;\n                        }\n                        e = this._hullPrev[e];\n                    } while (e !== this._hullStart);\n                }\n                this._link(a, hbl);\n                this._link(b, halfedges[ar]);\n                this._link(ar, bl);\n\n                const br = b0 + (b + 1) % 3;\n\n                // don't worry about hitting the cap: it can only happen on extremely degenerate input\n                if (i < EDGE_STACK.length) {\n                    EDGE_STACK[i++] = br;\n                }\n            } else {\n                if (i === 0) break;\n                a = EDGE_STACK[--i];\n            }\n        }\n\n        return ar;\n    }\n\n    _link(a, b) {\n        this._halfedges[a] = b;\n        if (b !== -1) this._halfedges[b] = a;\n    }\n\n    // add a new triangle given vertex indices and adjacent half-edge ids\n    _addTriangle(i0, i1, i2, a, b, c) {\n        const t = this.trianglesLen;\n\n        this._triangles[t] = i0;\n        this._triangles[t + 1] = i1;\n        this._triangles[t + 2] = i2;\n\n        this._link(t, a);\n        this._link(t + 1, b);\n        this._link(t + 2, c);\n\n        this.trianglesLen += 3;\n\n        return t;\n    }\n}\n\n// monotonically increases with real angle, but doesn't need expensive trigonometry\nfunction pseudoAngle(dx, dy) {\n    const p = dx / (Math.abs(dx) + Math.abs(dy));\n    return (dy > 0 ? 3 - p : 1 + p) / 4; // [0..1]\n}\n\nfunction dist(ax, ay, bx, by) {\n    const dx = ax - bx;\n    const dy = ay - by;\n    return dx * dx + dy * dy;\n}\n\n// return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check\nfunction orientIfSure(px, py, rx, ry, qx, qy) {\n    const l = (ry - py) * (qx - px);\n    const r = (rx - px) * (qy - py);\n    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0;\n}\n\n// a more robust orientation test that's stable in a given triangle (to fix robustness issues)\nfunction orient(rx, ry, qx, qy, px, py) {\n    const sign = orientIfSure(px, py, rx, ry, qx, qy) ||\n    orientIfSure(rx, ry, qx, qy, px, py) ||\n    orientIfSure(qx, qy, px, py, rx, ry);\n    return sign < 0;\n}\n\nfunction inCircle(ax, ay, bx, by, cx, cy, px, py) {\n    const dx = ax - px;\n    const dy = ay - py;\n    const ex = bx - px;\n    const ey = by - py;\n    const fx = cx - px;\n    const fy = cy - py;\n\n    const ap = dx * dx + dy * dy;\n    const bp = ex * ex + ey * ey;\n    const cp = fx * fx + fy * fy;\n\n    return dx * (ey * cp - bp * fy) -\n           dy * (ex * cp - bp * fx) +\n           ap * (ex * fy - ey * fx) < 0;\n}\n\nfunction circumradius(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = (ey * bl - dy * cl) * d;\n    const y = (dx * cl - ex * bl) * d;\n\n    return x * x + y * y;\n}\n\nfunction circumcenter(ax, ay, bx, by, cx, cy) {\n    const dx = bx - ax;\n    const dy = by - ay;\n    const ex = cx - ax;\n    const ey = cy - ay;\n\n    const bl = dx * dx + dy * dy;\n    const cl = ex * ex + ey * ey;\n    const d = 0.5 / (dx * ey - dy * ex);\n\n    const x = ax + (ey * bl - dy * cl) * d;\n    const y = ay + (dx * cl - ex * bl) * d;\n\n    return {x, y};\n}\n\nfunction quicksort(ids, dists, left, right) {\n    if (right - left <= 20) {\n        for (let i = left + 1; i <= right; i++) {\n            const temp = ids[i];\n            const tempDist = dists[temp];\n            let j = i - 1;\n            while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--];\n            ids[j + 1] = temp;\n        }\n    } else {\n        const median = (left + right) >> 1;\n        let i = left + 1;\n        let j = right;\n        swap(ids, median, i);\n        if (dists[ids[left]] > dists[ids[right]]) swap(ids, left, right);\n        if (dists[ids[i]] > dists[ids[right]]) swap(ids, i, right);\n        if (dists[ids[left]] > dists[ids[i]]) swap(ids, left, i);\n\n        const temp = ids[i];\n        const tempDist = dists[temp];\n        while (true) {\n            do i++; while (dists[ids[i]] < tempDist);\n            do j--; while (dists[ids[j]] > tempDist);\n            if (j < i) break;\n            swap(ids, i, j);\n        }\n        ids[left + 1] = ids[j];\n        ids[j] = temp;\n\n        if (right - i + 1 >= j - left) {\n            quicksort(ids, dists, i, right);\n            quicksort(ids, dists, left, j - 1);\n        } else {\n            quicksort(ids, dists, left, j - 1);\n            quicksort(ids, dists, i, right);\n        }\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nfunction defaultGetX(p) {\n    return p[0];\n}\nfunction defaultGetY(p) {\n    return p[1];\n}\n", "const epsilon = 1e-6;\n\nexport default class Path {\n  constructor() {\n    this._x0 = this._y0 = // start of current subpath\n    this._x1 = this._y1 = null; // end of current subpath\n    this._ = \"\";\n  }\n  moveTo(x, y) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\n  }\n  closePath() {\n    if (this._x1 !== null) {\n      this._x1 = this._x0, this._y1 = this._y0;\n      this._ += \"Z\";\n    }\n  }\n  lineTo(x, y) {\n    this._ += `L${this._x1 = +x},${this._y1 = +y}`;\n  }\n  arc(x, y, r) {\n    x = +x, y = +y, r = +r;\n    const x0 = x + r;\n    const y0 = y;\n    if (r < 0) throw new Error(\"negative radius\");\n    if (this._x1 === null) this._ += `M${x0},${y0}`;\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) this._ += \"L\" + x0 + \",\" + y0;\n    if (!r) return;\n    this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${this._x1 = x0},${this._y1 = y0}`;\n  }\n  rect(x, y, w, h) {\n    this._ += `M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${+w}v${+h}h${-w}Z`;\n  }\n  value() {\n    return this._ || null;\n  }\n}\n", "export default class Polygon {\n  constructor() {\n    this._ = [];\n  }\n  moveTo(x, y) {\n    this._.push([x, y]);\n  }\n  closePath() {\n    this._.push(this._[0].slice());\n  }\n  lineTo(x, y) {\n    this._.push([x, y]);\n  }\n  value() {\n    return this._.length ? this._ : null;\n  }\n}\n", "import Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\n\nexport default class Voronoi {\n  constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {\n    if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error(\"invalid bounds\");\n    this.delaunay = delaunay;\n    this._circumcenters = new Float64Array(delaunay.points.length * 2);\n    this.vectors = new Float64Array(delaunay.points.length * 2);\n    this.xmax = xmax, this.xmin = xmin;\n    this.ymax = ymax, this.ymin = ymin;\n    this._init();\n  }\n  update() {\n    this.delaunay.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const {delaunay: {points, hull, triangles}, vectors} = this;\n\n    // Compute circumcenters.\n    const circumcenters = this.circumcenters = this._circumcenters.subarray(0, triangles.length / 3 * 2);\n    for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {\n      const t1 = triangles[i] * 2;\n      const t2 = triangles[i + 1] * 2;\n      const t3 = triangles[i + 2] * 2;\n      const x1 = points[t1];\n      const y1 = points[t1 + 1];\n      const x2 = points[t2];\n      const y2 = points[t2 + 1];\n      const x3 = points[t3];\n      const y3 = points[t3 + 1];\n\n      const dx = x2 - x1;\n      const dy = y2 - y1;\n      const ex = x3 - x1;\n      const ey = y3 - y1;\n      const bl = dx * dx + dy * dy;\n      const cl = ex * ex + ey * ey;\n      const ab = (dx * ey - dy * ex) * 2;\n\n      if (!ab) {\n        // degenerate case (collinear diagram)\n        x = (x1 + x3) / 2 - 1e8 * ey;\n        y = (y1 + y3) / 2 + 1e8 * ex;\n      }\n      else if (Math.abs(ab) < 1e-8) {\n        // almost equal points (degenerate triangle)\n        x = (x1 + x3) / 2;\n        y = (y1 + y3) / 2;\n      } else {\n        const d = 1 / ab;\n        x = x1 + (ey * bl - dy * cl) * d;\n        y = y1 + (dx * cl - ex * bl) * d;\n      }\n      circumcenters[j] = x;\n      circumcenters[j + 1] = y;\n    }\n\n    // Compute exterior cell rays.\n    let h = hull[hull.length - 1];\n    let p0, p1 = h * 4;\n    let x0, x1 = points[2 * h];\n    let y0, y1 = points[2 * h + 1];\n    vectors.fill(0);\n    for (let i = 0; i < hull.length; ++i) {\n      h = hull[i];\n      p0 = p1, x0 = x1, y0 = y1;\n      p1 = h * 4, x1 = points[2 * h], y1 = points[2 * h + 1];\n      vectors[p0 + 2] = vectors[p1] = y0 - y1;\n      vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0;\n    }\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {delaunay: {halfedges, inedges, hull}, circumcenters, vectors} = this;\n    if (hull.length <= 1) return null;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = Math.floor(i / 3) * 2;\n      const tj = Math.floor(j / 3) * 2;\n      const xi = circumcenters[ti];\n      const yi = circumcenters[ti + 1];\n      const xj = circumcenters[tj];\n      const yj = circumcenters[tj + 1];\n      this._renderSegment(xi, yi, xj, yj, context);\n    }\n    let h0, h1 = hull[hull.length - 1];\n    for (let i = 0; i < hull.length; ++i) {\n      h0 = h1, h1 = hull[i];\n      const t = Math.floor(inedges[h1] / 3) * 2;\n      const x = circumcenters[t];\n      const y = circumcenters[t + 1];\n      const v = h0 * 4;\n      const p = this._project(x, y, vectors[v + 2], vectors[v + 3]);\n      if (p) this._renderSegment(x, y, p[0], p[1], context);\n    }\n    return buffer && buffer.value();\n  }\n  renderBounds(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin);\n    return buffer && buffer.value();\n  }\n  renderCell(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const points = this._clip(i);\n    if (points === null || !points.length) return;\n    context.moveTo(points[0], points[1]);\n    let n = points.length;\n    while (points[0] === points[n-2] && points[1] === points[n-1] && n > 1) n -= 2;\n    for (let i = 2; i < n; i += 2) {\n      if (points[i] !== points[i-2] || points[i+1] !== points[i-1])\n        context.lineTo(points[i], points[i + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *cellPolygons() {\n    const {delaunay: {points}} = this;\n    for (let i = 0, n = points.length / 2; i < n; ++i) {\n      const cell = this.cellPolygon(i);\n      if (cell) cell.index = i, yield cell;\n    }\n  }\n  cellPolygon(i) {\n    const polygon = new Polygon;\n    this.renderCell(i, polygon);\n    return polygon.value();\n  }\n  _renderSegment(x0, y0, x1, y1, context) {\n    let S;\n    const c0 = this._regioncode(x0, y0);\n    const c1 = this._regioncode(x1, y1);\n    if (c0 === 0 && c1 === 0) {\n      context.moveTo(x0, y0);\n      context.lineTo(x1, y1);\n    } else if (S = this._clipSegment(x0, y0, x1, y1, c0, c1)) {\n      context.moveTo(S[0], S[1]);\n      context.lineTo(S[2], S[3]);\n    }\n  }\n  contains(i, x, y) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return false;\n    return this.delaunay._step(i, x, y) === i;\n  }\n  *neighbors(i) {\n    const ci = this._clip(i);\n    if (ci) for (const j of this.delaunay.neighbors(i)) {\n      const cj = this._clip(j);\n      // find the common edge\n      if (cj) loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {\n        for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {\n          if (ci[ai] == cj[aj]\n          && ci[ai + 1] == cj[aj + 1]\n          && ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj]\n          && ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]\n          ) {\n            yield j;\n            break loop;\n          }\n        }\n      }\n    }\n  }\n  _cell(i) {\n    const {circumcenters, delaunay: {inedges, halfedges, triangles}} = this;\n    const e0 = inedges[i];\n    if (e0 === -1) return null; // coincident point\n    const points = [];\n    let e = e0;\n    do {\n      const t = Math.floor(e / 3);\n      points.push(circumcenters[t * 2], circumcenters[t * 2 + 1]);\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n    } while (e !== e0 && e !== -1);\n    return points;\n  }\n  _clip(i) {\n    // degenerate case (1 valid point: return the box)\n    if (i === 0 && this.delaunay.hull.length === 1) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    const points = this._cell(i);\n    if (points === null) return null;\n    const {vectors: V} = this;\n    const v = i * 4;\n    return V[v] || V[v + 1]\n        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])\n        : this._clipFinite(i, points);\n  }\n  _clipFinite(i, points) {\n    const n = points.length;\n    let P = null;\n    let x0, y0, x1 = points[n - 2], y1 = points[n - 1];\n    let c0, c1 = this._regioncode(x1, y1);\n    let e0, e1;\n    for (let j = 0; j < n; j += 2) {\n      x0 = x1, y0 = y1, x1 = points[j], y1 = points[j + 1];\n      c0 = c1, c1 = this._regioncode(x1, y1);\n      if (c0 === 0 && c1 === 0) {\n        e0 = e1, e1 = 0;\n        if (P) P.push(x1, y1);\n        else P = [x1, y1];\n      } else {\n        let S, sx0, sy0, sx1, sy1;\n        if (c0 === 0) {\n          if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue;\n          [sx0, sy0, sx1, sy1] = S;\n        } else {\n          if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue;\n          [sx1, sy1, sx0, sy0] = S;\n          e0 = e1, e1 = this._edgecode(sx0, sy0);\n          if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n          if (P) P.push(sx0, sy0);\n          else P = [sx0, sy0];\n        }\n        e0 = e1, e1 = this._edgecode(sx1, sy1);\n        if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n        if (P) P.push(sx1, sy1);\n        else P = [sx1, sy1];\n      }\n    }\n    if (P) {\n      e0 = e1, e1 = this._edgecode(P[0], P[1]);\n      if (e0 && e1) this._edge(i, e0, e1, P, P.length);\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin];\n    }\n    return P;\n  }\n  _clipSegment(x0, y0, x1, y1, c0, c1) {\n    while (true) {\n      if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1];\n      if (c0 & c1) return null;\n      let x, y, c = c0 || c1;\n      if (c & 0b1000) x = x0 + (x1 - x0) * (this.ymax - y0) / (y1 - y0), y = this.ymax;\n      else if (c & 0b0100) x = x0 + (x1 - x0) * (this.ymin - y0) / (y1 - y0), y = this.ymin;\n      else if (c & 0b0010) y = y0 + (y1 - y0) * (this.xmax - x0) / (x1 - x0), x = this.xmax;\n      else y = y0 + (y1 - y0) * (this.xmin - x0) / (x1 - x0), x = this.xmin;\n      if (c0) x0 = x, y0 = y, c0 = this._regioncode(x0, y0);\n      else x1 = x, y1 = y, c1 = this._regioncode(x1, y1);\n    }\n  }\n  _clipInfinite(i, points, vx0, vy0, vxn, vyn) {\n    let P = Array.from(points), p;\n    if (p = this._project(P[0], P[1], vx0, vy0)) P.unshift(p[0], p[1]);\n    if (p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn)) P.push(p[0], p[1]);\n    if (P = this._clipFinite(i, P)) {\n      for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {\n        c0 = c1, c1 = this._edgecode(P[j], P[j + 1]);\n        if (c0 && c1) j = this._edge(i, c0, c1, P, j), n = P.length;\n      }\n    } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {\n      P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax];\n    }\n    return P;\n  }\n  _edge(i, e0, e1, P, j) {\n    while (e0 !== e1) {\n      let x, y;\n      switch (e0) {\n        case 0b0101: e0 = 0b0100; continue; // top-left\n        case 0b0100: e0 = 0b0110, x = this.xmax, y = this.ymin; break; // top\n        case 0b0110: e0 = 0b0010; continue; // top-right\n        case 0b0010: e0 = 0b1010, x = this.xmax, y = this.ymax; break; // right\n        case 0b1010: e0 = 0b1000; continue; // bottom-right\n        case 0b1000: e0 = 0b1001, x = this.xmin, y = this.ymax; break; // bottom\n        case 0b1001: e0 = 0b0001; continue; // bottom-left\n        case 0b0001: e0 = 0b0101, x = this.xmin, y = this.ymin; break; // left\n      }\n      if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {\n        P.splice(j, 0, x, y), j += 2;\n      }\n    }\n    if (P.length > 4) {\n      for (let i = 0; i < P.length; i+= 2) {\n        const j = (i + 2) % P.length, k = (i + 4) % P.length;\n        if (P[i] === P[j] && P[j] === P[k]\n        || P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1])\n          P.splice(j, 2), i -= 2;\n      }\n    }\n    return j;\n  }\n  _project(x0, y0, vx, vy) {\n    let t = Infinity, c, x, y;\n    if (vy < 0) { // top\n      if (y0 <= this.ymin) return null;\n      if ((c = (this.ymin - y0) / vy) < t) y = this.ymin, x = x0 + (t = c) * vx;\n    } else if (vy > 0) { // bottom\n      if (y0 >= this.ymax) return null;\n      if ((c = (this.ymax - y0) / vy) < t) y = this.ymax, x = x0 + (t = c) * vx;\n    }\n    if (vx > 0) { // right\n      if (x0 >= this.xmax) return null;\n      if ((c = (this.xmax - x0) / vx) < t) x = this.xmax, y = y0 + (t = c) * vy;\n    } else if (vx < 0) { // left\n      if (x0 <= this.xmin) return null;\n      if ((c = (this.xmin - x0) / vx) < t) x = this.xmin, y = y0 + (t = c) * vy;\n    }\n    return [x, y];\n  }\n  _edgecode(x, y) {\n    return (x === this.xmin ? 0b0001\n        : x === this.xmax ? 0b0010 : 0b0000)\n        | (y === this.ymin ? 0b0100\n        : y === this.ymax ? 0b1000 : 0b0000);\n  }\n  _regioncode(x, y) {\n    return (x < this.xmin ? 0b0001\n        : x > this.xmax ? 0b0010 : 0b0000)\n        | (y < this.ymin ? 0b0100\n        : y > this.ymax ? 0b1000 : 0b0000);\n  }\n}\n", "import Delaunator from \"delaunator\";\nimport Path from \"./path.js\";\nimport Polygon from \"./polygon.js\";\nimport Voronoi from \"./voronoi.js\";\n\nconst tau = 2 * Math.PI, pow = Math.pow;\n\nfunction pointX(p) {\n  return p[0];\n}\n\nfunction pointY(p) {\n  return p[1];\n}\n\n// A triangulation is collinear if all its triangles have a non-null area\nfunction collinear(d) {\n  const {triangles, coords} = d;\n  for (let i = 0; i < triangles.length; i += 3) {\n    const a = 2 * triangles[i],\n          b = 2 * triangles[i + 1],\n          c = 2 * triangles[i + 2],\n          cross = (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1])\n                - (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1]);\n    if (cross > 1e-10) return false;\n  }\n  return true;\n}\n\nfunction jitter(x, y, r) {\n  return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r];\n}\n\nexport default class Delaunay {\n  static from(points, fx = pointX, fy = pointY, that) {\n    return new Delaunay(\"length\" in points\n        ? flatArray(points, fx, fy, that)\n        : Float64Array.from(flatIterable(points, fx, fy, that)));\n  }\n  constructor(points) {\n    this._delaunator = new Delaunator(points);\n    this.inedges = new Int32Array(points.length / 2);\n    this._hullIndex = new Int32Array(points.length / 2);\n    this.points = this._delaunator.coords;\n    this._init();\n  }\n  update() {\n    this._delaunator.update();\n    this._init();\n    return this;\n  }\n  _init() {\n    const d = this._delaunator, points = this.points;\n\n    // check for collinear\n    if (d.hull && d.hull.length > 2 && collinear(d)) {\n      this.collinear = Int32Array.from({length: points.length/2}, (_,i) => i)\n        .sort((i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]); // for exact neighbors\n      const e = this.collinear[0], f = this.collinear[this.collinear.length - 1],\n        bounds = [ points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1] ],\n        r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0]);\n      for (let i = 0, n = points.length / 2; i < n; ++i) {\n        const p = jitter(points[2 * i], points[2 * i + 1], r);\n        points[2 * i] = p[0];\n        points[2 * i + 1] = p[1];\n      }\n      this._delaunator = new Delaunator(points);\n    } else {\n      delete this.collinear;\n    }\n\n    const halfedges = this.halfedges = this._delaunator.halfedges;\n    const hull = this.hull = this._delaunator.hull;\n    const triangles = this.triangles = this._delaunator.triangles;\n    const inedges = this.inedges.fill(-1);\n    const hullIndex = this._hullIndex.fill(-1);\n\n    // Compute an index from each point to an (arbitrary) incoming halfedge\n    // Used to give the first neighbor of each point; for this reason,\n    // on the hull we give priority to exterior halfedges\n    for (let e = 0, n = halfedges.length; e < n; ++e) {\n      const p = triangles[e % 3 === 2 ? e - 2 : e + 1];\n      if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e;\n    }\n    for (let i = 0, n = hull.length; i < n; ++i) {\n      hullIndex[hull[i]] = i;\n    }\n\n    // degenerate case: 1 or 2 (distinct) points\n    if (hull.length <= 2 && hull.length > 0) {\n      this.triangles = new Int32Array(3).fill(-1);\n      this.halfedges = new Int32Array(3).fill(-1);\n      this.triangles[0] = hull[0];\n      this.triangles[1] = hull[1];\n      this.triangles[2] = hull[1];\n      inedges[hull[0]] = 1;\n      if (hull.length === 2) inedges[hull[1]] = 0;\n    }\n  }\n  voronoi(bounds) {\n    return new Voronoi(this, bounds);\n  }\n  *neighbors(i) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, collinear} = this;\n\n    // degenerate case with several collinear points\n    if (collinear) {\n      const l = collinear.indexOf(i);\n      if (l > 0) yield collinear[l - 1];\n      if (l < collinear.length - 1) yield collinear[l + 1];\n      return;\n    }\n\n    const e0 = inedges[i];\n    if (e0 === -1) return; // coincident point\n    let e = e0, p0 = -1;\n    do {\n      yield p0 = triangles[e];\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) return; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        const p = hull[(_hullIndex[i] + 1) % hull.length];\n        if (p !== p0) yield p;\n        return;\n      }\n    } while (e !== e0);\n  }\n  find(x, y, i = 0) {\n    if ((x = +x, x !== x) || (y = +y, y !== y)) return -1;\n    const i0 = i;\n    let c;\n    while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c;\n    return c;\n  }\n  _step(i, x, y) {\n    const {inedges, hull, _hullIndex, halfedges, triangles, points} = this;\n    if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1);\n    let c = i;\n    let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2);\n    const e0 = inedges[i];\n    let e = e0;\n    do {\n      let t = triangles[e];\n      const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2);\n      if (dt < dc) dc = dt, c = t;\n      e = e % 3 === 2 ? e - 2 : e + 1;\n      if (triangles[e] !== i) break; // bad triangulation\n      e = halfedges[e];\n      if (e === -1) {\n        e = hull[(_hullIndex[i] + 1) % hull.length];\n        if (e !== t) {\n          if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e;\n        }\n        break;\n      }\n    } while (e !== e0);\n    return c;\n  }\n  render(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, halfedges, triangles} = this;\n    for (let i = 0, n = halfedges.length; i < n; ++i) {\n      const j = halfedges[i];\n      if (j < i) continue;\n      const ti = triangles[i] * 2;\n      const tj = triangles[j] * 2;\n      context.moveTo(points[ti], points[ti + 1]);\n      context.lineTo(points[tj], points[tj + 1]);\n    }\n    this.renderHull(context);\n    return buffer && buffer.value();\n  }\n  renderPoints(context, r = 2) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points} = this;\n    for (let i = 0, n = points.length; i < n; i += 2) {\n      const x = points[i], y = points[i + 1];\n      context.moveTo(x + r, y);\n      context.arc(x, y, r, 0, tau);\n    }\n    return buffer && buffer.value();\n  }\n  renderHull(context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {hull, points} = this;\n    const h = hull[0] * 2, n = hull.length;\n    context.moveTo(points[h], points[h + 1]);\n    for (let i = 1; i < n; ++i) {\n      const h = 2 * hull[i];\n      context.lineTo(points[h], points[h + 1]);\n    }\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  hullPolygon() {\n    const polygon = new Polygon;\n    this.renderHull(polygon);\n    return polygon.value();\n  }\n  renderTriangle(i, context) {\n    const buffer = context == null ? context = new Path : undefined;\n    const {points, triangles} = this;\n    const t0 = triangles[i *= 3] * 2;\n    const t1 = triangles[i + 1] * 2;\n    const t2 = triangles[i + 2] * 2;\n    context.moveTo(points[t0], points[t0 + 1]);\n    context.lineTo(points[t1], points[t1 + 1]);\n    context.lineTo(points[t2], points[t2 + 1]);\n    context.closePath();\n    return buffer && buffer.value();\n  }\n  *trianglePolygons() {\n    const {triangles} = this;\n    for (let i = 0, n = triangles.length / 3; i < n; ++i) {\n      yield this.trianglePolygon(i);\n    }\n  }\n  trianglePolygon(i) {\n    const polygon = new Polygon;\n    this.renderTriangle(i, polygon);\n    return polygon.value();\n  }\n}\n\nfunction flatArray(points, fx, fy, that) {\n  const n = points.length;\n  const array = new Float64Array(n * 2);\n  for (let i = 0; i < n; ++i) {\n    const p = points[i];\n    array[i * 2] = fx.call(that, p, i, points);\n    array[i * 2 + 1] = fy.call(that, p, i, points);\n  }\n  return array;\n}\n\nfunction* flatIterable(points, fx, fy, that) {\n  let i = 0;\n  for (const p of points) {\n    yield fx.call(that, p, i, points);\n    yield fy.call(that, p, i, points);\n    ++i;\n  }\n}\n", "import { VoronoiDomain, VoronoiLayer } from './types'\n\nexport const defaultVoronoiProps = {\n    xDomain: [0, 1] as VoronoiDomain,\n    yDomain: [0, 1] as VoronoiDomain,\n    layers: ['links', 'cells', 'points', 'bounds'] as VoronoiLayer[],\n    enableLinks: false,\n    linkLineWidth: 1,\n    linkLineColor: '#bbbbbb',\n    enableCells: true,\n    cellLineWidth: 2,\n    cellLineColor: '#000000',\n    enablePoints: true,\n    pointSize: 4,\n    pointColor: '#666666',\n    role: 'img',\n}\n", "import { Delaunay } from 'd3-delaunay'\n\ntype NumberPropertyNames<T> = {\n    [K in keyof T]: T[K] extends number ? K : never\n}[keyof T]\n\nexport type XYAccessor<Datum> = NumberPropertyNames<Datum> | ((datum: Datum) => number)\n\nconst getAccessor = <Datum>(directive: XYAccessor<Datum>) =>\n    typeof directive === 'function' ? directive : (datum: Datum) => datum[directive]\n\n/**\n * The delaunay generator requires an array\n * where each point is defined as an array\n * of 2 elements: [x: number, y: number].\n *\n * Points represent the raw input data\n * and x/y represent accessors to x & y.\n */\nexport const computeMeshPoints = <Datum>({\n    points,\n    x = 'x' as NumberPropertyNames<Datum>,\n    y = 'y' as NumberPropertyNames<Datum>,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n}): [number, number][] => {\n    const getX = getAccessor<Datum>(x)\n    const getY = getAccessor<Datum>(y)\n\n    return points.map(point => [getX(point) as number, getY(point) as number])\n}\n\nexport const computeMesh = ({\n    points,\n    width,\n    height,\n    debug,\n}: {\n    points: [number, number][]\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const delaunay = Delaunay.from(points)\n    const voronoi = debug ? delaunay.voronoi([0, 0, width, height]) : undefined\n\n    return { delaunay, voronoi }\n}\n", "import { useMemo } from 'react'\nimport { scaleLinear } from 'd3-scale'\nimport { Delaunay } from 'd3-delaunay'\nimport { computeMeshPoints, computeMesh, XYAccessor } from './computeMesh'\nimport { VoronoiCommonProps, VoronoiDatum, VoronoiCustomLayerProps } from './types'\n\nexport const useVoronoiMesh = <Datum>({\n    points,\n    x,\n    y,\n    width,\n    height,\n    debug,\n}: {\n    points: Datum[]\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    width: number\n    height: number\n    debug?: boolean\n}) => {\n    const points2d = useMemo(() => computeMeshPoints<Datum>({ points, x, y }), [points, x, y])\n\n    return useMemo(\n        () => computeMesh({ points: points2d, width, height, debug }),\n        [points2d, width, height, debug]\n    )\n}\n\nexport const useVoronoi = ({\n    data,\n    width,\n    height,\n    xDomain,\n    yDomain,\n}: {\n    data: VoronoiDatum[]\n    width: number\n    height: number\n    xDomain: VoronoiCommonProps['xDomain']\n    yDomain: VoronoiCommonProps['yDomain']\n}) => {\n    const xScale = useMemo(() => scaleLinear().domain(xDomain).range([0, width]), [xDomain, width])\n    const yScale = useMemo(\n        () => scaleLinear().domain(yDomain).range([0, height]),\n        [yDomain, height]\n    )\n\n    const points = useMemo(\n        () =>\n            data.map(d => ({\n                x: xScale(d.x),\n                y: yScale(d.y),\n                data: d,\n            })),\n        [data, xScale, yScale]\n    )\n\n    return useMemo(() => {\n        const delaunay = Delaunay.from(points.map(p => [p.x, p.y]))\n        const voronoi = delaunay.voronoi([0, 0, width, height])\n\n        return {\n            points,\n            delaunay,\n            voronoi,\n        }\n    }, [points, width, height])\n}\n\n/**\n * Memoize the context to pass to custom layers.\n */\nexport const useVoronoiLayerContext = ({\n    points,\n    delaunay,\n    voronoi,\n}: VoronoiCustomLayerProps): VoronoiCustomLayerProps =>\n    useMemo(\n        () => ({\n            points,\n            delaunay,\n            voronoi,\n        }),\n        [points, delaunay, voronoi]\n    )\n", "import { createElement, Fragment, ReactNode } from 'react'\nimport { Container, SvgWrapper, useDimensions } from '@nivo/core'\nimport { VoronoiSvgProps, VoronoiLayerId } from './types'\nimport { defaultVoronoiProps } from './props'\nimport { useVoronoi, useVoronoiLayerContext } from './hooks'\n\ntype InnerVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>\n\nconst InnerVoronoi = ({\n    data,\n    width,\n    height,\n    margin: partialMargin,\n    layers = defaultVoronoiProps.layers,\n    xDomain = defaultVoronoiProps.xDomain,\n    yDomain = defaultVoronoiProps.yDomain,\n    enableLinks = defaultVoronoiProps.enableLinks,\n    linkLineWidth = defaultVoronoiProps.linkLineWidth,\n    linkLineColor = defaultVoronoiProps.linkLineColor,\n    enableCells = defaultVoronoiProps.enableCells,\n    cellLineWidth = defaultVoronoiProps.cellLineWidth,\n    cellLineColor = defaultVoronoiProps.cellLineColor,\n    enablePoints = defaultVoronoiProps.enableCells,\n    pointSize = defaultVoronoiProps.pointSize,\n    pointColor = defaultVoronoiProps.pointColor,\n    role = defaultVoronoiProps.role,\n}: InnerVoronoiProps) => {\n    const { outerWidth, outerHeight, margin, innerWidth, innerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const { points, delaunay, voronoi } = useVoronoi({\n        data,\n        width: innerWidth,\n        height: innerHeight,\n        xDomain,\n        yDomain,\n    })\n\n    const layerById: Record<VoronoiLayerId, ReactNode> = {\n        links: null,\n        cells: null,\n        points: null,\n        bounds: null,\n    }\n\n    if (enableLinks && layers.includes('links')) {\n        layerById.links = (\n            <path\n                key=\"links\"\n                stroke={linkLineColor}\n                strokeWidth={linkLineWidth}\n                fill=\"none\"\n                d={delaunay.render()}\n            />\n        )\n    }\n\n    if (enableCells && layers.includes('cells')) {\n        layerById.cells = (\n            <path\n                key=\"cells\"\n                d={voronoi.render()}\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n            />\n        )\n    }\n\n    if (enablePoints && layers.includes('points')) {\n        layerById.points = (\n            <path\n                key=\"points\"\n                stroke=\"none\"\n                fill={pointColor}\n                d={delaunay.renderPoints(undefined, pointSize / 2)}\n            />\n        )\n    }\n\n    if (layers.includes('bounds')) {\n        layerById.bounds = (\n            <path\n                key=\"bounds\"\n                fill=\"none\"\n                stroke={cellLineColor}\n                strokeWidth={cellLineWidth}\n                d={voronoi.renderBounds()}\n            />\n        )\n    }\n\n    const layerContext = useVoronoiLayerContext({\n        points,\n        delaunay,\n        voronoi,\n    })\n\n    return (\n        <SvgWrapper width={outerWidth} height={outerHeight} margin={margin} role={role}>\n            {layers.map((layer, i) => {\n                if (layerById[layer as VoronoiLayerId] !== undefined) {\n                    return layerById[layer as VoronoiLayerId]\n                }\n\n                if (typeof layer === 'function') {\n                    return <Fragment key={i}>{createElement(layer, layerContext)}</Fragment>\n                }\n\n                return null\n            })}\n        </SvgWrapper>\n    )\n}\n\nexport const Voronoi = ({\n    theme,\n    ...otherProps\n}: Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data' | 'width' | 'height'>) => (\n    <Container isInteractive={false} animate={false} theme={theme}>\n        <InnerVoronoi {...otherProps} />\n    </Container>\n)\n", "import { ResponsiveWrapper } from '@nivo/core'\nimport { VoronoiSvgProps } from './types'\nimport { Voronoi } from './Voronoi'\n\ntype ResponsiveVoronoiProps = Partial<Omit<VoronoiSvgProps, 'data' | 'width' | 'height'>> &\n    Pick<VoronoiSvgProps, 'data'>\n\nexport const ResponsiveVoronoi = (props: ResponsiveVoronoiProps) => (\n    <ResponsiveWrapper>\n        {({ width, height }: { width: number; height: number }) => (\n            <Voronoi width={width} height={height} {...props} />\n        )}\n    </ResponsiveWrapper>\n)\n", "import { useRef, useState, useCallback, useMemo } from 'react'\nimport * as React from 'react'\nimport { getRelativeCursor } from '@nivo/core'\nimport { useVoronoiMesh } from './hooks'\nimport { XYAccessor } from './computeMesh'\n\ntype MouseHandler<Datum> = (datum: Datum, event: React.MouseEvent) => void\n\ninterface MeshProps<Datum> {\n    nodes: Datum[]\n    width: number\n    height: number\n    x?: XYAccessor<Datum>\n    y?: XYAccessor<Datum>\n    onMouseEnter?: MouseHandler<Datum>\n    onMouseMove?: MouseHandler<Datum>\n    onMouseLeave?: MouseHandler<Datum>\n    onClick?: MouseHandler<Datum>\n    debug?: boolean\n}\n\nexport const Mesh = <Datum,>({\n    nodes,\n    width,\n    height,\n    x,\n    y,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    debug,\n}: MeshProps<Datum>) => {\n    const elementRef = useRef<SVGGElement>(null)\n    const [currentIndex, setCurrentIndex] = useState<number | null>(null)\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points: nodes,\n        x,\n        y,\n        width,\n        height,\n        debug,\n    })\n\n    const voronoiPath = useMemo(() => {\n        if (debug && voronoi) {\n            return voronoi.render()\n        }\n\n        return undefined\n    }, [debug, voronoi])\n\n    const getIndexAndNodeFromEvent = useCallback(\n        event => {\n            if (!elementRef.current) {\n                return [null, null]\n            }\n\n            const [x, y] = getRelativeCursor(elementRef.current, event)\n            const index = delaunay.find(x, y)\n\n            return [index, index !== undefined ? nodes[index] : null] as [number, Datum | null]\n        },\n        [elementRef, delaunay]\n    )\n\n    const handleMouseEnter = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseEnter?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseEnter]\n    )\n\n    const handleMouseMove = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onMouseMove?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (event: React.MouseEvent) => {\n            setCurrentIndex(null)\n            if (onMouseLeave) {\n                let previousNode: Datum | undefined = undefined\n                if (currentIndex !== null) {\n                    previousNode = nodes[currentIndex]\n                }\n                previousNode && onMouseLeave(previousNode, event)\n            }\n        },\n        [setCurrentIndex, currentIndex, onMouseLeave, nodes]\n    )\n\n    const handleClick = useCallback(\n        (event: React.MouseEvent) => {\n            const [index, node] = getIndexAndNodeFromEvent(event)\n            setCurrentIndex(index)\n            if (node) {\n                onClick?.(node, event)\n            }\n        },\n        [getIndexAndNodeFromEvent, setCurrentIndex, onClick]\n    )\n\n    return (\n        <g ref={elementRef}>\n            {debug && voronoi && (\n                <>\n                    <path d={voronoiPath} stroke=\"red\" strokeWidth={1} opacity={0.75} />\n                    {/* highlight current cell */}\n                    {currentIndex !== null && (\n                        <path fill=\"pink\" opacity={0.35} d={voronoi.renderCell(currentIndex)} />\n                    )}\n                </>\n            )}\n            {/* transparent rect to intercept mouse events */}\n            <rect\n                width={width}\n                height={height}\n                fill=\"red\"\n                opacity={0}\n                style={{ cursor: 'auto' }}\n                onMouseEnter={handleMouseEnter}\n                onMouseMove={handleMouseMove}\n                onMouseLeave={handleMouseLeave}\n                onClick={handleClick}\n            />\n        </g>\n    )\n}\n", "import { Delaunay, Voronoi } from 'd3-delaunay'\n\nexport const renderVoronoiToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.75\n    ctx.beginPath()\n    voronoi.render(ctx)\n    ctx.strokeStyle = 'red'\n    ctx.lineWidth = 1\n    ctx.stroke()\n\n    ctx.restore()\n}\n\nexport const renderVoronoiCellToCanvas = (\n    ctx: CanvasRenderingContext2D,\n    voronoi: Voronoi<Delaunay.Point>,\n    index: number\n) => {\n    ctx.save()\n\n    ctx.globalAlpha = 0.35\n    ctx.beginPath()\n    voronoi.renderCell(index, ctx)\n    ctx.fillStyle = 'red'\n    ctx.fill()\n\n    ctx.restore()\n}\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { BasicTooltip } from '@nivo/tooltip'\n\nconst LinePointTooltip = ({ point }) => {\n    return (\n        <BasicTooltip\n            id={\n                <span>\n                    x: <strong>{point.data.xFormatted}</strong>, y:{' '}\n                    <strong>{point.data.yFormatted}</strong>\n                </span>\n            }\n            enableChip={true}\n            color={point.serieColor}\n        />\n    )\n}\n\nLinePointTooltip.propTypes = {\n    point: PropTypes.object.isRequired,\n}\n\nexport default memo(LinePointTooltip)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTheme } from '@nivo/core'\nimport { Chip, TableTooltip } from '@nivo/tooltip'\n\nconst SliceTooltip = ({ slice, axis }) => {\n    const theme = useTheme()\n    const otherAxis = axis === 'x' ? 'y' : 'x'\n\n    return (\n        <TableTooltip\n            rows={slice.points.map(point => [\n                <Chip key=\"chip\" color={point.serieColor} style={theme.tooltip.chip} />,\n                point.serieId,\n                <span key=\"value\" style={theme.tooltip.tableCellValue}>\n                    {point.data[`${otherAxis}Formatted`]}\n                </span>,\n            ])}\n        />\n    )\n}\n\nSliceTooltip.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n}\n\nexport default memo(SliceTooltip)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport PropTypes from 'prop-types'\nimport { lineCurvePropType, blendModePropType, motionPropTypes, defsPropTypes } from '@nivo/core'\nimport { ordinalColorsPropType } from '@nivo/colors'\nimport { axisPropType } from '@nivo/axes'\nimport { LegendPropShape } from '@nivo/legends'\nimport PointTooltip from './PointTooltip'\nimport SliceTooltip from './SliceTooltip'\n\nconst commonPropTypes = {\n    data: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    x: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                    y: PropTypes.oneOfType([\n                        PropTypes.number,\n                        PropTypes.string,\n                        PropTypes.instanceOf(Date),\n                    ]),\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n\n    xScale: PropTypes.object.isRequired,\n    xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n    yScale: PropTypes.object.isRequired,\n    yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n\n    layers: PropTypes.arrayOf(\n        PropTypes.oneOfType([\n            PropTypes.oneOf([\n                'grid',\n                'markers',\n                'axes',\n                'areas',\n                'crosshair',\n                'lines',\n                'slices',\n                'points',\n                'mesh',\n                'legends',\n            ]),\n            PropTypes.func,\n        ])\n    ).isRequired,\n\n    curve: lineCurvePropType.isRequired,\n\n    axisTop: axisPropType,\n    axisRight: axisPropType,\n    axisBottom: axisPropType,\n    axisLeft: axisPropType,\n\n    enableGridX: PropTypes.bool.isRequired,\n    enableGridY: PropTypes.bool.isRequired,\n    gridXValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n    gridYValues: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.arrayOf(\n            PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n        ),\n    ]),\n\n    enablePoints: PropTypes.bool.isRequired,\n    pointSymbol: PropTypes.func,\n    pointSize: PropTypes.number.isRequired,\n    pointColor: PropTypes.any.isRequired,\n    pointBorderWidth: PropTypes.number.isRequired,\n    pointBorderColor: PropTypes.any.isRequired,\n    enablePointLabel: PropTypes.bool.isRequired,\n    pointLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n\n    markers: PropTypes.arrayOf(\n        PropTypes.shape({\n            axis: PropTypes.oneOf(['x', 'y']).isRequired,\n            value: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            style: PropTypes.object,\n        })\n    ),\n\n    colors: ordinalColorsPropType.isRequired,\n\n    enableArea: PropTypes.bool.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    areaBaselineValue: PropTypes.oneOfType([\n        PropTypes.number,\n        PropTypes.string,\n        PropTypes.instanceOf(Date),\n    ]).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n\n    legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n\n    isInteractive: PropTypes.bool.isRequired,\n    debugMesh: PropTypes.bool.isRequired,\n\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n    debugSlices: PropTypes.bool.isRequired,\n    sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n\n    enableCrosshair: PropTypes.bool.isRequired,\n    crosshairType: PropTypes.string.isRequired,\n}\n\nexport const LinePropTypes = {\n    ...commonPropTypes,\n    enablePointLabel: PropTypes.bool.isRequired,\n    role: PropTypes.string.isRequired,\n    useMesh: PropTypes.bool.isRequired,\n    ...motionPropTypes,\n    ...defsPropTypes,\n}\n\nexport const LineCanvasPropTypes = {\n    pixelRatio: PropTypes.number.isRequired,\n    ...commonPropTypes,\n}\n\nconst commonDefaultProps = {\n    curve: 'linear',\n\n    xScale: {\n        type: 'point',\n    },\n    yScale: {\n        type: 'linear',\n        min: 0,\n        max: 'auto',\n    },\n\n    layers: [\n        'grid',\n        'markers',\n        'axes',\n        'areas',\n        'crosshair',\n        'lines',\n        'points',\n        'slices',\n        'mesh',\n        'legends',\n    ],\n    axisBottom: {},\n    axisLeft: {},\n    enableGridX: true,\n    enableGridY: true,\n\n    enablePoints: true,\n    pointSize: 6,\n    pointColor: { from: 'color' },\n    pointBorderWidth: 0,\n    pointBorderColor: { theme: 'background' },\n    enablePointLabel: false,\n    pointLabel: 'yFormatted',\n\n    colors: { scheme: 'nivo' },\n    enableArea: false,\n    areaBaselineValue: 0,\n    areaOpacity: 0.2,\n    areaBlendMode: 'normal',\n    lineWidth: 2,\n\n    legends: [],\n\n    isInteractive: true,\n    tooltip: PointTooltip,\n    enableSlices: false,\n    debugSlices: false,\n    sliceTooltip: SliceTooltip,\n    debugMesh: false,\n    enableCrosshair: true,\n    crosshairType: 'bottom-left',\n}\n\nexport const LineDefaultProps = {\n    ...commonDefaultProps,\n    enablePointLabel: false,\n    useMesh: false,\n    animate: true,\n    motionConfig: 'gentle',\n    defs: [],\n    fill: [],\n    role: 'img',\n}\n\nexport const LineCanvasDefaultProps = {\n    ...commonDefaultProps,\n    pixelRatio: typeof window !== 'undefined' ? window.devicePixelRatio || 1 : 1,\n}\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { useCallback, useMemo, useState } from 'react'\nimport { area, line } from 'd3-shape'\nimport { curveFromProp, useTheme, useValueFormatter } from '@nivo/core'\nimport { useOrdinalColorScale, useInheritedColor } from '@nivo/colors'\nimport { computeXYScalesForSeries } from '@nivo/scales'\nimport { LineDefaultProps } from './props'\n\nexport const useLineGenerator = ({ curve }) => {\n    return useMemo(\n        () =>\n            line()\n                .defined(d => d.x !== null && d.y !== null)\n                .x(d => d.x)\n                .y(d => d.y)\n                .curve(curveFromProp(curve)),\n        [curve]\n    )\n}\n\nexport const useAreaGenerator = ({ curve, yScale, areaBaselineValue }) => {\n    return useMemo(() => {\n        return area()\n            .defined(d => d.x !== null && d.y !== null)\n            .x(d => d.x)\n            .y1(d => d.y)\n            .curve(curveFromProp(curve))\n            .y0(yScale(areaBaselineValue))\n    }, [curve, yScale, areaBaselineValue])\n}\n\nconst usePoints = ({ series, getPointColor, getPointBorderColor, formatX, formatY }) => {\n    return useMemo(() => {\n        return series.reduce((acc, serie) => {\n            return [\n                ...acc,\n                ...serie.data\n                    .filter(datum => datum.position.x !== null && datum.position.y !== null)\n                    .map((datum, i) => {\n                        const point = {\n                            id: `${serie.id}.${i}`,\n                            index: acc.length + i,\n                            serieId: serie.id,\n                            serieColor: serie.color,\n                            x: datum.position.x,\n                            y: datum.position.y,\n                        }\n                        point.color = getPointColor(serie)\n                        point.borderColor = getPointBorderColor(point)\n                        point.data = {\n                            ...datum.data,\n                            xFormatted: formatX(datum.data.x),\n                            yFormatted: formatY(datum.data.y),\n                        }\n\n                        return point\n                    }),\n            ]\n        }, [])\n    }, [series, getPointColor, getPointBorderColor, formatX, formatY])\n}\n\nexport const useSlices = ({ enableSlices, points, width, height }) => {\n    return useMemo(() => {\n        if (enableSlices === false) return []\n\n        if (enableSlices === 'x') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.x)) map.set(point.x, [point])\n                else map.get(point.x).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([x, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let x0\n                    if (!prevSlice) x0 = x\n                    else x0 = x - (x - prevSlice[0]) / 2\n\n                    let sliceWidth\n                    if (!nextSlice) sliceWidth = width - x0\n                    else sliceWidth = x - x0 + (nextSlice[0] - x) / 2\n\n                    return {\n                        id: x,\n                        x0,\n                        x,\n                        y0: 0,\n                        y: 0,\n                        width: sliceWidth,\n                        height,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        } else if (enableSlices === 'y') {\n            const map = new Map()\n            points.forEach(point => {\n                if (point.data.x === null || point.data.y === null) return\n                if (!map.has(point.y)) map.set(point.y, [point])\n                else map.get(point.y).push(point)\n            })\n            return Array.from(map.entries())\n                .sort((a, b) => a[0] - b[0])\n                .map(([y, slicePoints], i, slices) => {\n                    const prevSlice = slices[i - 1]\n                    const nextSlice = slices[i + 1]\n\n                    let y0\n                    if (!prevSlice) y0 = y\n                    else y0 = y - (y - prevSlice[0]) / 2\n\n                    let sliceHeight\n                    if (!nextSlice) sliceHeight = height - y0\n                    else sliceHeight = y - y0 + (nextSlice[0] - y) / 2\n\n                    return {\n                        id: y,\n                        x0: 0,\n                        x: 0,\n                        y0,\n                        y,\n                        width,\n                        height: sliceHeight,\n                        points: slicePoints.reverse(),\n                    }\n                })\n        }\n    }, [enableSlices, points])\n}\n\nexport const useLine = ({\n    data,\n    xScale: xScaleSpec = LineDefaultProps.xScale,\n    xFormat,\n    yScale: yScaleSpec = LineDefaultProps.yScale,\n    yFormat,\n    width,\n    height,\n    colors = LineDefaultProps.colors,\n    curve = LineDefaultProps.curve,\n    areaBaselineValue = LineDefaultProps.areaBaselineValue,\n    pointColor = LineDefaultProps.pointColor,\n    pointBorderColor = LineDefaultProps.pointBorderColor,\n    enableSlices = LineDefaultProps.enableSlicesTooltip,\n}) => {\n    const formatX = useValueFormatter(xFormat)\n    const formatY = useValueFormatter(yFormat)\n    const getColor = useOrdinalColorScale(colors, 'id')\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n    const [hiddenIds, setHiddenIds] = useState([])\n\n    const {\n        xScale,\n        yScale,\n        series: rawSeries,\n    } = useMemo(\n        () =>\n            computeXYScalesForSeries(\n                data.filter(item => hiddenIds.indexOf(item.id) === -1),\n                xScaleSpec,\n                yScaleSpec,\n                width,\n                height\n            ),\n        [data, hiddenIds, xScaleSpec, yScaleSpec, width, height]\n    )\n\n    const { legendData, series } = useMemo(() => {\n        const dataWithColor = data.map(line => ({\n            id: line.id,\n            label: line.id,\n            color: getColor(line),\n        }))\n        const series = dataWithColor\n            .map(datum => ({\n                ...rawSeries.find(serie => serie.id === datum.id),\n                color: datum.color,\n            }))\n            .filter(item => Boolean(item.id))\n        const legendData = dataWithColor\n            .map(item => ({ ...item, hidden: !series.find(serie => serie.id === item.id) }))\n            .reverse()\n\n        return { legendData, series }\n    }, [data, rawSeries, getColor])\n\n    const toggleSerie = useCallback(id => {\n        setHiddenIds(state =>\n            state.indexOf(id) > -1 ? state.filter(item => item !== id) : [...state, id]\n        )\n    }, [])\n\n    const points = usePoints({\n        series,\n        getPointColor,\n        getPointBorderColor,\n        formatX,\n        formatY,\n    })\n\n    const slices = useSlices({\n        enableSlices,\n        points,\n        width,\n        height,\n    })\n\n    const lineGenerator = useLineGenerator({ curve })\n    const areaGenerator = useAreaGenerator({\n        curve,\n        yScale,\n        areaBaselineValue,\n    })\n\n    return {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        getColor,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    }\n}\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { useSpring, animated } from '@react-spring/web'\nimport { useAnimatedPath, useMotionConfig, blendModePropType } from '@nivo/core'\n\nconst AreaPath = ({ areaBlendMode, areaOpacity, color, fill, path }) => {\n    const { animate, config: springConfig } = useMotionConfig()\n\n    const animatedPath = useAnimatedPath(path)\n    const animatedProps = useSpring({\n        color,\n        config: springConfig,\n        immediate: !animate,\n    })\n\n    return (\n        <animated.path\n            d={animatedPath}\n            fill={fill ? fill : animatedProps.color}\n            fillOpacity={areaOpacity}\n            strokeWidth={0}\n            style={{\n                mixBlendMode: areaBlendMode,\n            }}\n        />\n    )\n}\n\nAreaPath.propTypes = {\n    areaBlendMode: blendModePropType.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    color: PropTypes.string,\n    fill: PropTypes.string,\n    path: PropTypes.string.isRequired,\n}\n\nconst Areas = ({ areaGenerator, areaOpacity, areaBlendMode, lines }) => {\n    const computedLines = lines.slice(0).reverse()\n\n    return (\n        <g>\n            {computedLines.map(line => (\n                <AreaPath\n                    key={line.id}\n                    path={areaGenerator(line.data.map(d => d.position))}\n                    {...{ areaOpacity, areaBlendMode, ...line }}\n                />\n            ))}\n        </g>\n    )\n}\n\nAreas.propTypes = {\n    areaGenerator: PropTypes.func.isRequired,\n    areaOpacity: PropTypes.number.isRequired,\n    areaBlendMode: blendModePropType.isRequired,\n    lines: PropTypes.arrayOf(PropTypes.object).isRequired,\n}\n\nexport default memo(Areas)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport { animated } from '@react-spring/web'\nimport { useAnimatedPath } from '@nivo/core'\n\nconst LinesItem = ({ lineGenerator, points, color, thickness }) => {\n    const path = useMemo(() => lineGenerator(points), [lineGenerator, points])\n    const animatedPath = useAnimatedPath(path)\n\n    return <animated.path d={animatedPath} fill=\"none\" strokeWidth={thickness} stroke={color} />\n}\n\nLinesItem.propTypes = {\n    points: PropTypes.arrayOf(\n        PropTypes.shape({\n            x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n            y: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n        })\n    ),\n    lineGenerator: PropTypes.func.isRequired,\n    color: PropTypes.string.isRequired,\n    thickness: PropTypes.number.isRequired,\n}\n\nexport default memo(LinesItem)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport LinesItem from './LinesItem'\n\nconst Lines = ({ lines, lineGenerator, lineWidth }) => {\n    return lines\n        .slice(0)\n        .reverse()\n        .map(({ id, data, color }) => (\n            <LinesItem\n                key={id}\n                id={id}\n                points={data.map(d => d.position)}\n                lineGenerator={lineGenerator}\n                color={color}\n                thickness={lineWidth}\n            />\n        ))\n}\n\nLines.propTypes = {\n    lines: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n            color: PropTypes.string.isRequired,\n            data: PropTypes.arrayOf(\n                PropTypes.shape({\n                    data: PropTypes.shape({\n                        x: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                        y: PropTypes.oneOfType([\n                            PropTypes.string,\n                            PropTypes.number,\n                            PropTypes.instanceOf(Date),\n                        ]),\n                    }).isRequired,\n                    position: PropTypes.shape({\n                        x: PropTypes.number,\n                        y: PropTypes.number,\n                    }).isRequired,\n                })\n            ).isRequired,\n        })\n    ).isRequired,\n    lineWidth: PropTypes.number.isRequired,\n    lineGenerator: PropTypes.func.isRequired,\n}\n\nexport default memo(Lines)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\n\nconst SlicesItem = ({ slice, axis, debug, tooltip, isCurrent, setCurrent }) => {\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n            setCurrent(slice)\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseMove = useCallback(\n        event => {\n            showTooltipFromEvent(createElement(tooltip, { slice, axis }), event, 'right')\n        },\n        [showTooltipFromEvent, tooltip, slice]\n    )\n\n    const handleMouseLeave = useCallback(() => {\n        hideTooltip()\n        setCurrent(null)\n    }, [hideTooltip])\n\n    return (\n        <rect\n            x={slice.x0}\n            y={slice.y0}\n            width={slice.width}\n            height={slice.height}\n            stroke=\"red\"\n            strokeWidth={debug ? 1 : 0}\n            strokeOpacity={0.75}\n            fill=\"red\"\n            fillOpacity={isCurrent && debug ? 0.35 : 0}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n        />\n    )\n}\n\nSlicesItem.propTypes = {\n    slice: PropTypes.object.isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n    isCurrent: PropTypes.bool.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(SlicesItem)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport SlicesItem from './SlicesItem'\n\nconst Slices = ({ slices, axis, debug, height, tooltip, current, setCurrent }) => {\n    return slices.map(slice => (\n        <SlicesItem\n            key={slice.id}\n            slice={slice}\n            axis={axis}\n            debug={debug}\n            height={height}\n            tooltip={tooltip}\n            setCurrent={setCurrent}\n            isCurrent={current !== null && current.id === slice.id}\n        />\n    ))\n}\n\nSlices.propTypes = {\n    slices: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n                PropTypes.instanceOf(Date),\n            ]).isRequired,\n            x: PropTypes.number.isRequired,\n            y: PropTypes.number.isRequired,\n            points: PropTypes.arrayOf(PropTypes.object).isRequired,\n        })\n    ).isRequired,\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    debug: PropTypes.bool.isRequired,\n    height: PropTypes.number.isRequired,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    current: PropTypes.object,\n    setCurrent: PropTypes.func.isRequired,\n}\n\nexport default memo(Slices)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { memo } from 'react'\nimport PropTypes from 'prop-types'\nimport { getLabelGenerator, DotsItem, useTheme } from '@nivo/core'\n\nconst Points = ({ points, symbol, size, borderWidth, enableLabel, label, labelYOffset }) => {\n    const theme = useTheme()\n    const getLabel = getLabelGenerator(label)\n\n    /**\n     * We reverse the `points` array so that points from the lower lines in stacked lines\n     * graph are drawn on top. See https://github.com/plouc/nivo/issues/1051.\n     */\n    const mappedPoints = points\n        .slice(0)\n        .reverse()\n        .map(point => {\n            const mappedPoint = {\n                id: point.id,\n                x: point.x,\n                y: point.y,\n                datum: point.data,\n                fill: point.color,\n                stroke: point.borderColor,\n                label: enableLabel ? getLabel(point.data) : null,\n            }\n\n            return mappedPoint\n        })\n\n    return (\n        <g>\n            {mappedPoints.map(point => (\n                <DotsItem\n                    key={point.id}\n                    x={point.x}\n                    y={point.y}\n                    datum={point.datum}\n                    symbol={symbol}\n                    size={size}\n                    color={point.fill}\n                    borderWidth={borderWidth}\n                    borderColor={point.stroke}\n                    label={point.label}\n                    labelYOffset={labelYOffset}\n                    theme={theme}\n                />\n            ))}\n        </g>\n    )\n}\n\nPoints.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object),\n    symbol: PropTypes.func,\n    size: PropTypes.number.isRequired,\n    color: PropTypes.func.isRequired,\n    borderWidth: PropTypes.number.isRequired,\n    borderColor: PropTypes.func.isRequired,\n    enableLabel: PropTypes.bool.isRequired,\n    label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n    labelYOffset: PropTypes.number,\n}\n\nexport default memo(Points)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, memo, useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport { useTooltip } from '@nivo/tooltip'\nimport { Mesh as BaseMesh } from '@nivo/voronoi'\n\nconst Mesh = ({\n    points,\n    width,\n    height,\n    margin,\n    setCurrent,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n    debug,\n}) => {\n    const { showTooltipAt, hideTooltip } = useTooltip()\n\n    const handleMouseEnter = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseEnter && onMouseEnter(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]\n    )\n\n    const handleMouseMove = useCallback(\n        (point, event) => {\n            showTooltipAt(\n                createElement(tooltip, { point }),\n                [point.x + margin.left, point.y + margin.top],\n                'top'\n            )\n            setCurrent(point)\n            onMouseMove && onMouseMove(point, event)\n        },\n        [setCurrent, showTooltipAt, tooltip, onMouseMove]\n    )\n\n    const handleMouseLeave = useCallback(\n        (point, event) => {\n            hideTooltip()\n            setCurrent(null)\n            onMouseLeave && onMouseLeave(point, event)\n        },\n        [hideTooltip, setCurrent, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        (point, event) => {\n            onClick && onClick(point, event)\n        },\n        [onClick]\n    )\n\n    return (\n        <BaseMesh\n            nodes={points}\n            width={width}\n            height={height}\n            onMouseEnter={handleMouseEnter}\n            onMouseMove={handleMouseMove}\n            onMouseLeave={handleMouseLeave}\n            onClick={handleClick}\n            debug={debug}\n        />\n    )\n}\n\nMesh.propTypes = {\n    points: PropTypes.arrayOf(PropTypes.object).isRequired,\n    width: PropTypes.number.isRequired,\n    height: PropTypes.number.isRequired,\n    margin: PropTypes.object.isRequired,\n    setCurrent: PropTypes.func.isRequired,\n    onMouseEnter: PropTypes.func,\n    onMouseMove: PropTypes.func,\n    onMouseLeave: PropTypes.func,\n    onClick: PropTypes.func,\n    tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n    debug: PropTypes.bool.isRequired,\n}\n\nexport default memo(Mesh)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { Fragment, useState } from 'react'\nimport {\n    bindDefs,\n    withContainer,\n    useDimensions,\n    useTheme,\n    SvgWrapper,\n    CartesianMarkers,\n} from '@nivo/core'\nimport { useInheritedColor } from '@nivo/colors'\nimport { Axes, Grid } from '@nivo/axes'\nimport { BoxLegendSvg } from '@nivo/legends'\nimport { Crosshair } from '@nivo/tooltip'\nimport { useLine } from './hooks'\nimport { LinePropTypes, LineDefaultProps } from './props'\nimport Areas from './Areas'\nimport Lines from './Lines'\nimport Slices from './Slices'\nimport Points from './Points'\nimport Mesh from './Mesh'\n\nconst Line = props => {\n    const {\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        layers,\n        curve,\n        areaBaselineValue,\n\n        colors,\n\n        margin: partialMargin,\n        width,\n        height,\n\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        enableGridX,\n        enableGridY,\n        gridXValues,\n        gridYValues,\n\n        lineWidth,\n        enableArea,\n        areaOpacity,\n        areaBlendMode,\n\n        enablePoints,\n        pointSymbol,\n        pointSize,\n        pointColor,\n        pointBorderWidth,\n        pointBorderColor,\n        enablePointLabel,\n        pointLabel,\n        pointLabelYOffset,\n\n        defs,\n        fill,\n\n        markers,\n\n        legends,\n\n        isInteractive,\n\n        useMesh,\n        debugMesh,\n\n        onMouseEnter,\n        onMouseMove,\n        onMouseLeave,\n        onClick,\n\n        tooltip,\n\n        enableSlices,\n        debugSlices,\n        sliceTooltip,\n\n        enableCrosshair,\n        crosshairType,\n\n        role,\n    } = props\n\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n\n    const {\n        legendData,\n        toggleSerie,\n        lineGenerator,\n        areaGenerator,\n        series,\n        xScale,\n        yScale,\n        slices,\n        points,\n    } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n        enableSlices,\n    })\n\n    const theme = useTheme()\n    const getPointColor = useInheritedColor(pointColor, theme)\n    const getPointBorderColor = useInheritedColor(pointBorderColor, theme)\n\n    const [currentPoint, setCurrentPoint] = useState(null)\n    const [currentSlice, setCurrentSlice] = useState(null)\n\n    const layerById = {\n        grid: (\n            <Grid\n                key=\"grid\"\n                theme={theme}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={enableGridX ? xScale : null}\n                yScale={enableGridY ? yScale : null}\n                xValues={gridXValues}\n                yValues={gridYValues}\n            />\n        ),\n        markers: (\n            <CartesianMarkers\n                key=\"markers\"\n                markers={markers}\n                width={innerWidth}\n                height={innerHeight}\n                xScale={xScale}\n                yScale={yScale}\n                theme={theme}\n            />\n        ),\n        axes: (\n            <Axes\n                key=\"axes\"\n                xScale={xScale}\n                yScale={yScale}\n                width={innerWidth}\n                height={innerHeight}\n                theme={theme}\n                top={axisTop}\n                right={axisRight}\n                bottom={axisBottom}\n                left={axisLeft}\n            />\n        ),\n        areas: null,\n        lines: (\n            <Lines key=\"lines\" lines={series} lineGenerator={lineGenerator} lineWidth={lineWidth} />\n        ),\n        slices: null,\n        points: null,\n        crosshair: null,\n        mesh: null,\n        legends: legends.map((legend, i) => (\n            <BoxLegendSvg\n                key={`legend.${i}`}\n                {...legend}\n                containerWidth={innerWidth}\n                containerHeight={innerHeight}\n                data={legend.data || legendData}\n                theme={theme}\n                toggleSerie={legend.toggleSerie ? toggleSerie : undefined}\n            />\n        )),\n    }\n\n    const boundDefs = bindDefs(defs, series, fill)\n\n    if (enableArea) {\n        layerById.areas = (\n            <Areas\n                key=\"areas\"\n                areaGenerator={areaGenerator}\n                areaOpacity={areaOpacity}\n                areaBlendMode={areaBlendMode}\n                lines={series}\n            />\n        )\n    }\n\n    if (isInteractive && enableSlices !== false) {\n        layerById.slices = (\n            <Slices\n                key=\"slices\"\n                slices={slices}\n                axis={enableSlices}\n                debug={debugSlices}\n                height={innerHeight}\n                tooltip={sliceTooltip}\n                current={currentSlice}\n                setCurrent={setCurrentSlice}\n            />\n        )\n    }\n\n    if (enablePoints) {\n        layerById.points = (\n            <Points\n                key=\"points\"\n                points={points}\n                symbol={pointSymbol}\n                size={pointSize}\n                color={getPointColor}\n                borderWidth={pointBorderWidth}\n                borderColor={getPointBorderColor}\n                enableLabel={enablePointLabel}\n                label={pointLabel}\n                labelYOffset={pointLabelYOffset}\n            />\n        )\n    }\n\n    if (isInteractive && enableCrosshair) {\n        if (currentPoint !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentPoint.x}\n                    y={currentPoint.y}\n                    type={crosshairType}\n                />\n            )\n        }\n        if (currentSlice !== null) {\n            layerById.crosshair = (\n                <Crosshair\n                    key=\"crosshair\"\n                    width={innerWidth}\n                    height={innerHeight}\n                    x={currentSlice.x}\n                    y={currentSlice.y}\n                    type={enableSlices}\n                />\n            )\n        }\n    }\n\n    if (isInteractive && useMesh && enableSlices === false) {\n        layerById.mesh = (\n            <Mesh\n                key=\"mesh\"\n                points={points}\n                width={innerWidth}\n                height={innerHeight}\n                margin={margin}\n                current={currentPoint}\n                setCurrent={setCurrentPoint}\n                onMouseEnter={onMouseEnter}\n                onMouseMove={onMouseMove}\n                onMouseLeave={onMouseLeave}\n                onClick={onClick}\n                tooltip={tooltip}\n                debug={debugMesh}\n            />\n        )\n    }\n\n    return (\n        <SvgWrapper\n            defs={boundDefs}\n            width={outerWidth}\n            height={outerHeight}\n            margin={margin}\n            role={role}\n        >\n            {layers.map((layer, i) => {\n                if (typeof layer === 'function') {\n                    return (\n                        <Fragment key={i}>\n                            {layer({\n                                ...props,\n                                innerWidth,\n                                innerHeight,\n                                series,\n                                slices,\n                                points,\n                                xScale,\n                                yScale,\n                                lineGenerator,\n                                areaGenerator,\n                                currentPoint,\n                                setCurrentPoint,\n                                currentSlice,\n                                setCurrentSlice,\n                            })}\n                        </Fragment>\n                    )\n                }\n\n                return layerById[layer]\n            })}\n        </SvgWrapper>\n    )\n}\n\nLine.propTypes = LinePropTypes\nLine.defaultProps = LineDefaultProps\n\nexport default withContainer(Line)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { ResponsiveWrapper } from '@nivo/core'\nimport Line from './Line'\n\nconst ResponsiveLine = props => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <Line width={width} height={height} {...props} />}\n    </ResponsiveWrapper>\n)\n\nexport default ResponsiveLine\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { createElement, useRef, useEffect, useState, useCallback, forwardRef } from 'react'\nimport {\n    withContainer,\n    useDimensions,\n    useTheme,\n    getRelativeCursor,\n    isCursorInRect,\n} from '@nivo/core'\nimport { renderAxesToCanvas, renderGridLinesToCanvas } from '@nivo/axes'\nimport { renderLegendToCanvas } from '@nivo/legends'\nimport { useTooltip } from '@nivo/tooltip'\nimport { useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi'\nimport { LineCanvasPropTypes, LineCanvasDefaultProps } from './props'\nimport { useLine } from './hooks'\n\nconst LineCanvas = ({\n    width,\n    height,\n    margin: partialMargin,\n    pixelRatio,\n\n    data,\n    xScale: xScaleSpec,\n    xFormat,\n    yScale: yScaleSpec,\n    yFormat,\n    curve,\n\n    layers,\n\n    colors,\n    lineWidth,\n\n    enableArea,\n    areaBaselineValue,\n    areaOpacity,\n\n    enablePoints,\n    pointSize,\n    pointColor,\n    pointBorderWidth,\n    pointBorderColor,\n\n    enableGridX,\n    gridXValues,\n    enableGridY,\n    gridYValues,\n    axisTop,\n    axisRight,\n    axisBottom,\n    axisLeft,\n\n    legends,\n\n    isInteractive,\n    debugMesh,\n    //onMouseEnter,\n    //onMouseMove,\n    onMouseLeave,\n    onClick,\n    tooltip,\n\n    canvasRef,\n}) => {\n    const canvasEl = useRef(null)\n    const { margin, innerWidth, innerHeight, outerWidth, outerHeight } = useDimensions(\n        width,\n        height,\n        partialMargin\n    )\n    const theme = useTheme()\n    const [currentPoint, setCurrentPoint] = useState(null)\n\n    const { lineGenerator, areaGenerator, series, xScale, yScale, points } = useLine({\n        data,\n        xScale: xScaleSpec,\n        xFormat,\n        yScale: yScaleSpec,\n        yFormat,\n        width: innerWidth,\n        height: innerHeight,\n        colors,\n        curve,\n        areaBaselineValue,\n        pointColor,\n        pointBorderColor,\n    })\n\n    const { delaunay, voronoi } = useVoronoiMesh({\n        points,\n        width: innerWidth,\n        height: innerHeight,\n        debug: debugMesh,\n    })\n\n    useEffect(() => {\n        if (canvasRef) {\n            canvasRef.current = canvasEl.current\n        }\n\n        canvasEl.current.width = outerWidth * pixelRatio\n        canvasEl.current.height = outerHeight * pixelRatio\n\n        const ctx = canvasEl.current.getContext('2d')\n\n        ctx.scale(pixelRatio, pixelRatio)\n\n        ctx.fillStyle = theme.background\n        ctx.fillRect(0, 0, outerWidth, outerHeight)\n        ctx.translate(margin.left, margin.top)\n\n        layers.forEach(layer => {\n            if (typeof layer === 'function') {\n                layer({\n                    ctx,\n                    innerWidth,\n                    innerHeight,\n                    series,\n                    points,\n                    xScale,\n                    yScale,\n                    lineWidth,\n                    lineGenerator,\n                    areaGenerator,\n                    currentPoint,\n                    setCurrentPoint,\n                })\n            }\n\n            if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n                ctx.lineWidth = theme.grid.line.strokeWidth\n                ctx.strokeStyle = theme.grid.line.stroke\n\n                enableGridX &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: xScale,\n                        axis: 'x',\n                        values: gridXValues,\n                    })\n\n                enableGridY &&\n                    renderGridLinesToCanvas(ctx, {\n                        width: innerWidth,\n                        height: innerHeight,\n                        scale: yScale,\n                        axis: 'y',\n                        values: gridYValues,\n                    })\n            }\n\n            if (layer === 'axes') {\n                renderAxesToCanvas(ctx, {\n                    xScale,\n                    yScale,\n                    width: innerWidth,\n                    height: innerHeight,\n                    top: axisTop,\n                    right: axisRight,\n                    bottom: axisBottom,\n                    left: axisLeft,\n                    theme,\n                })\n            }\n\n            if (layer === 'areas' && enableArea === true) {\n                ctx.save()\n                ctx.globalAlpha = areaOpacity\n\n                areaGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.fillStyle = serie.color\n                    ctx.beginPath()\n                    areaGenerator(serie.data.map(d => d.position))\n                    ctx.fill()\n                })\n\n                ctx.restore()\n            }\n\n            if (layer === 'lines') {\n                lineGenerator.context(ctx)\n                series.forEach(serie => {\n                    ctx.strokeStyle = serie.color\n                    ctx.lineWidth = lineWidth\n                    ctx.beginPath()\n                    lineGenerator(serie.data.map(d => d.position))\n                    ctx.stroke()\n                })\n            }\n\n            if (layer === 'points' && enablePoints === true && pointSize > 0) {\n                points.forEach(point => {\n                    ctx.fillStyle = point.color\n                    ctx.beginPath()\n                    ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI)\n                    ctx.fill()\n\n                    if (pointBorderWidth > 0) {\n                        ctx.strokeStyle = point.borderColor\n                        ctx.lineWidth = pointBorderWidth\n                        ctx.stroke()\n                    }\n                })\n            }\n\n            if (layer === 'mesh' && debugMesh === true) {\n                renderVoronoiToCanvas(ctx, voronoi)\n                if (currentPoint) {\n                    renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index)\n                }\n            }\n\n            if (layer === 'legends') {\n                const legendData = series\n                    .map(serie => ({\n                        id: serie.id,\n                        label: serie.id,\n                        color: serie.color,\n                    }))\n                    .reverse()\n\n                legends.forEach(legend => {\n                    renderLegendToCanvas(ctx, {\n                        ...legend,\n                        data: legend.data || legendData,\n                        containerWidth: innerWidth,\n                        containerHeight: innerHeight,\n                        theme,\n                    })\n                })\n            }\n        })\n    }, [\n        canvasEl,\n        outerWidth,\n        outerHeight,\n        layers,\n        theme,\n        lineGenerator,\n        series,\n        xScale,\n        yScale,\n        enableGridX,\n        gridXValues,\n        enableGridY,\n        gridYValues,\n        axisTop,\n        axisRight,\n        axisBottom,\n        axisLeft,\n        legends,\n        points,\n        enablePoints,\n        pointSize,\n        currentPoint,\n    ])\n\n    const getPointFromMouseEvent = useCallback(\n        event => {\n            const [x, y] = getRelativeCursor(canvasEl.current, event)\n            if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null\n\n            const pointIndex = delaunay.find(x - margin.left, y - margin.top)\n            return points[pointIndex]\n        },\n        [canvasEl, margin, innerWidth, innerHeight, delaunay]\n    )\n\n    const { showTooltipFromEvent, hideTooltip } = useTooltip()\n\n    const handleMouseHover = useCallback(\n        event => {\n            const point = getPointFromMouseEvent(event)\n            setCurrentPoint(point)\n\n            if (point) {\n                showTooltipFromEvent(createElement(tooltip, { point }), event)\n            } else {\n                hideTooltip()\n            }\n        },\n        [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]\n    )\n\n    const handleMouseLeave = useCallback(\n        event => {\n            hideTooltip()\n            setCurrentPoint(null)\n            currentPoint && onMouseLeave && onMouseLeave(currentPoint, event)\n        },\n        [hideTooltip, setCurrentPoint, onMouseLeave]\n    )\n\n    const handleClick = useCallback(\n        event => {\n            if (onClick) {\n                const point = getPointFromMouseEvent(event)\n                point && onClick(point, event)\n            }\n        },\n        [getPointFromMouseEvent, onClick]\n    )\n\n    return (\n        <canvas\n            ref={canvasEl}\n            width={outerWidth * pixelRatio}\n            height={outerHeight * pixelRatio}\n            style={{\n                width: outerWidth,\n                height: outerHeight,\n                cursor: isInteractive ? 'auto' : 'normal',\n            }}\n            onMouseEnter={isInteractive ? handleMouseHover : undefined}\n            onMouseMove={isInteractive ? handleMouseHover : undefined}\n            onMouseLeave={isInteractive ? handleMouseLeave : undefined}\n            onClick={isInteractive ? handleClick : undefined}\n        />\n    )\n}\n\nLineCanvas.propTypes = LineCanvasPropTypes\nLineCanvas.defaultProps = LineCanvasDefaultProps\n\nconst LineCanvasWithContainer = withContainer(LineCanvas)\n\nexport default forwardRef((props, ref) => <LineCanvasWithContainer {...props} canvasRef={ref} />)\n", "/*\n * This file is part of the nivo project.\n *\n * Copyright 2016-present, Raphaël Benitte.\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\nimport { forwardRef } from 'react'\nimport { ResponsiveWrapper } from '@nivo/core'\nimport LineCanvas from './LineCanvas'\n\nconst ResponsiveLineCanvas = (props, ref) => (\n    <ResponsiveWrapper>\n        {({ width, height }) => <LineCanvas width={width} height={height} {...props} ref={ref} />}\n    </ResponsiveWrapper>\n)\n\nexport default forwardRef(ResponsiveLineCanvas)\n"],
  "mappings": "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",
  "names": ["collection", "collection", "precisionCutOffs", "date", "setMilliseconds", "setSeconds", "setMinutes", "setHours", "setDate", "setMonth", "precisionCutOffsByType", "millisecond", "second", "slice", "minute", "hour", "day", "month", "year", "createPrecisionMethod", "precision", "forEach", "cutOff", "createDateNormalizer", "n", "t", "format", "e", "useUTC", "precisionFn", "value", "Date", "parseTime", "utcParse", "timeParse", "createLinearScale", "data", "size", "axis", "minValue", "maxValue", "min", "f", "s", "max", "stacked", "reverse", "clamp", "nice", "minStacked", "maxStacked", "scale", "scaleLinear", "rangeRound", "domain", "castLinearScale", "typedScale", "type", "createPointScale", "_spec", "scalePoint", "range", "all", "createBandScale", "n", "data", "size", "axis", "round", "scale", "scaleBand", "range", "domain", "all", "castBandScale", "typedScale", "type", "createTimeScale", "minValue", "maxValue", "format", "i", "precision", "f", "min", "max", "y", "useUTC", "nice", "normalize", "createDateNormalizer", "scaleUtc", "scaleTime", "createLogScale", "sign", "base", "some", "v", "Error", "hasMixedSign", "filter", "forEach", "Math", "scaleLog", "rangeRound", "createSymlogScale", "constant", "o", "l", "reverse", "scaleSymlog", "getOtherAxis", "compareValues", "a", "b", "compareDateValues", "getTime", "computeScale", "spec", "createLinearScale", "createPointScale", "getDatumAxisPosition", "datum", "stacked", "stackedValue", "computeXYScalesForSeries", "series", "xScaleSpec", "yScaleSpec", "width", "height", "nestedSeries", "map", "serie", "d", "xy", "generateSeriesXY", "stackX", "stackY", "xScale", "x", "yScale", "computedSeries", "position", "generateSeriesAxis", "scaleSpec", "getValue", "setValue", "value", "parseFloat", "String", "parseTime", "values", "push", "sortBy", "uniq", "uniqBy", "slice", "sort", "last", "stackAxis", "otherAxis", "compare", "isDate", "stack", "find", "stackValue", "head", "minStacked", "maxStacked", "centerScale", "bandwidth", "offset", "timeByType", "millisecond", "timeMillisecond", "utcMillisecond", "second", "timeSecond", "utcSecond", "minute", "timeMinute", "utcMinute", "hour", "timeHour", "utcHour", "day", "timeInterval", "date", "setHours", "step", "setDate", "getDate", "start", "end", "floor", "setUTCHours", "setUTCDate", "getUTCDate", "week", "timeWeek", "utcWeek", "sunday", "timeSunday", "utcSunday", "monday", "timeMonday", "utcMonday", "tuesday", "timeTuesday", "utcTuesday", "wednesday", "timeWednesday", "utcWednesday", "thursday", "timeThursday", "utcThursday", "friday", "timeFriday", "utcFriday", "saturday", "timeSaturday", "utcSaturday", "month", "timeMonth", "utcMonth", "year", "timeYear", "utcYear", "timeTypes", "Object", "keys", "timeIntervalRegexp", "RegExp", "join", "getScaleTicks", "Array", "isArray", "matches", "match", "amount", "timeType", "originalStop", "stop", "Date", "every", "Number", "_timeType$every", "ticks", "interval", "isFinite", "computeCartesianTicks", "t", "translate", "axis", "scale", "ticksPosition", "tickValues", "tickSize", "tickPadding", "tickRotation", "engine", "f", "values", "getScaleTicks", "textProps", "textPropsByEngine", "position", "centerScale", "line", "lineX", "lineY", "text", "textX", "textY", "isRTL", "document", "dir", "textAlign", "align", "center", "textBaseline", "baseline", "d", "x", "y", "top", "bottom", "left", "right", "ticks", "map", "value", "key", "Date", "valueOf", "getFormatter", "format", "type", "formatter", "timeFormat", "d3Format", "computeGridLines", "width", "height", "_values", "Array", "isArray", "lines", "x1", "x2", "y1", "y2", "memoizedAxisTick", "memo", "e", "_value", "onClick", "textAnchor", "animatedProps", "theme", "useTheme", "props", "useMemo", "style", "opacity", "cursor", "event", "_jsxs", "animated", "g", "transform", "_jsx", "dominantBaseline", "textTransform", "memoizedAxis", "length", "P", "O", "A", "renderTick", "AxisTick", "legend", "legendPosition", "V", "legendOffset", "ariaHidden", "formatValue", "legendNode", "legendX", "legendY", "legendRotation", "useMotionConfig", "animate", "springConfig", "config", "useSpring", "lineX2", "lineY2", "immediate", "transition", "useTransition", "keys", "tick", "initial", "from", "enter", "update", "leave", "transitionProps", "_state", "tickIndex", "createElement", "rotate", "domain", "axisPropTypes", "PropTypes", "oneOf", "oneOfType", "number", "arrayOf", "string", "instanceOf", "func", "node", "bool", "axisPropType", "shape", "positions", "Axes", "xScale", "yScale", "axes", "isXAxis", "Axis", "GridLine", "grid", "GridLines", "_createElement", "Grid", "xValues", "yValues", "xLines", "yLines", "renderAxisToCanvas", "ctx", "a", "l", "k", "_format", "T", "save", "font", "fontWeight", "fontSize", "fontFamily", "strokeWidth", "lineWidth", "Number", "lineCap", "stroke", "strokeStyle", "beginPath", "moveTo", "lineTo", "forEach", "degreesToRadians", "fill", "fillStyle", "fillText", "String", "restore", "renderAxesToCanvas", "renderGridLinesToCanvas", "n", "i", "p", "x", "y", "i2", "r", "k", "e", "t", "a", "b", "pr", "l", "x", "y", "r", "w", "h", "x", "y", "i", "n", "x", "y", "t2", "t3", "x1", "y1", "x2", "y2", "h", "ti", "yi", "t", "v", "p", "S", "e", "V", "P", "j", "k", "p", "i", "a", "b", "x", "y", "r", "_", "e", "f", "n", "collinear", "l", "t", "ti", "h", "t2", "getAccessor", "directive", "datum", "computeMeshPoints", "n", "points", "x", "i", "t", "y", "getX", "getY", "map", "point", "computeMesh", "width", "height", "debug", "delaunay", "Delaunay", "from", "voronoi", "undefined", "useVoronoiMesh", "e", "points2d", "useMemo", "Mesh", "e", "nodes", "width", "height", "x", "y", "onMouseEnter", "onMouseMove", "onMouseLeave", "onClick", "debug", "elementRef", "useRef", "k", "useState", "currentIndex", "setCurrentIndex", "useVoronoiMesh", "points", "delaunay", "voronoi", "voronoiPath", "useMemo", "render", "getIndexAndNodeFromEvent", "useCallback", "event", "current", "getRelativeCursor", "index", "find", "handleMouseEnter", "node", "handleMouseMove", "handleMouseLeave", "previousNode", "handleClick", "_jsxs", "ref", "_jsx", "d", "stroke", "strokeWidth", "opacity", "fill", "renderCell", "style", "cursor", "renderVoronoiToCanvas", "ctx", "save", "globalAlpha", "beginPath", "strokeStyle", "lineWidth", "restore", "renderVoronoiCellToCanvas", "fillStyle", "LinePointTooltip", "e", "point", "_jsx", "BasicTooltip", "id", "_jsxs", "data", "xFormatted", "yFormatted", "enableChip", "color", "serieColor", "propTypes", "PropTypes", "object", "isRequired", "memo", "SliceTooltip", "slice", "axis", "theme", "useTheme", "otherAxis", "TableTooltip", "rows", "points", "map", "Chip", "style", "tooltip", "chip", "serieId", "tableCellValue", "oneOf", "commonPropTypes", "arrayOf", "shape", "oneOfType", "string", "number", "x", "instanceOf", "Date", "y", "xScale", "xFormat", "func", "yScale", "yFormat", "layers", "curve", "lineCurvePropType", "axisTop", "axisPropType", "axisRight", "axisBottom", "axisLeft", "enableGridX", "bool", "enableGridY", "gridXValues", "gridYValues", "enablePoints", "pointSymbol", "pointSize", "pointColor", "any", "pointBorderWidth", "pointBorderColor", "enablePointLabel", "pointLabel", "markers", "value", "colors", "ordinalColorsPropType", "enableArea", "areaOpacity", "areaBlendMode", "blendModePropType", "areaBaselineValue", "lineWidth", "legends", "LegendPropShape", "isInteractive", "debugMesh", "enableSlices", "debugSlices", "sliceTooltip", "enableCrosshair", "crosshairType", "LinePropTypes", "role", "useMesh", "motionPropTypes", "defsPropTypes", "LineCanvasPropTypes", "pixelRatio", "commonDefaultProps", "type", "min", "max", "from", "scheme", "PointTooltip", "LineDefaultProps", "animate", "motionConfig", "defs", "fill", "LineCanvasDefaultProps", "window", "devicePixelRatio", "useLineGenerator", "useMemo", "line", "defined", "d", "curveFromProp", "useAreaGenerator", "area", "y1", "y0", "useSlices", "width", "height", "Map", "forEach", "has", "get", "push", "set", "Array", "entries", "sort", "a", "b", "i", "slices", "x0", "slicePoints", "prevSlice", "nextSlice", "reverse", "sliceHeight", "useLine", "xScaleSpec", "yScaleSpec", "enableSlicesTooltip", "formatX", "useValueFormatter", "formatY", "getColor", "useOrdinalColorScale", "getPointColor", "useInheritedColor", "getPointBorderColor", "useState", "hiddenIds", "setHiddenIds", "computeXYScalesForSeries", "filter", "item", "indexOf", "rawSeries", "series", "dataWithColor", "label", "datum", "find", "serie", "Boolean", "legendData", "hidden", "toggleSerie", "useCallback", "state", "reduce", "acc", "position", "index", "length", "borderColor", "lineGenerator", "areaGenerator", "AreaPath", "path", "useMotionConfig", "springConfig", "config", "animatedPath", "useAnimatedPath", "animatedProps", "useSpring", "immediate", "animated", "fillOpacity", "strokeWidth", "mixBlendMode", "Areas", "computedLines", "lines", "LinesItem", "thickness", "stroke", "Lines", "SlicesItem", "debug", "isCurrent", "setCurrent", "useTooltip", "showTooltipFromEvent", "hideTooltip", "handleMouseEnter", "event", "createElement", "handleMouseMove", "handleMouseLeave", "strokeOpacity", "onMouseEnter", "onMouseMove", "onMouseLeave", "Slices", "current", "Points", "symbol", "size", "borderWidth", "enableLabel", "labelYOffset", "getLabel", "getLabelGenerator", "mappedPoints", "DotsItem", "Mesh", "margin", "onClick", "showTooltipAt", "left", "top", "handleClick", "BaseMesh", "nodes", "We", "Line", "props", "partialMargin", "pointLabelYOffset", "useDimensions", "innerWidth", "innerHeight", "outerWidth", "outerHeight", "currentPoint", "setCurrentPoint", "currentSlice", "setCurrentSlice", "layerById", "grid", "Grid", "xValues", "yValues", "CartesianMarkers", "axes", "Axes", "right", "bottom", "areas", "crosshair", "mesh", "legend", "BoxLegendSvg", "containerWidth", "containerHeight", "undefined", "boundDefs", "bindDefs", "Crosshair", "SvgWrapper", "layer", "Fragment", "defaultProps", "withContainer", "ResponsiveLine", "ResponsiveWrapper", "r", "LineCanvas", "canvasRef", "canvasEl", "useRef", "$", "useVoronoiMesh", "delaunay", "voronoi", "useEffect", "ctx", "getContext", "scale", "fillStyle", "background", "fillRect", "translate", "strokeStyle", "renderGridLinesToCanvas", "values", "renderAxesToCanvas", "save", "globalAlpha", "context", "beginPath", "restore", "arc", "Math", "PI", "renderVoronoiToCanvas", "renderVoronoiCellToCanvas", "renderLegendToCanvas", "getPointFromMouseEvent", "getRelativeCursor", "isCursorInRect", "pointIndex", "handleMouseHover", "ref", "cursor", "LineCanvasWithContainer", "forwardRef"]
}
